
HMI_ECV2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  00002f58  00002fec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  008000b6  008000b6  00003042  2**0
                  ALLOC
  3 .stab         00002b2c  00000000  00000000  00003044  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001154  00000000  00000000  00005b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a858  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ac45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b413  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 eb       	ldi	r26, 0xB6	; 182
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3e       	cpi	r26, 0xE2	; 226
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 29 09 	call	0x1252	; 0x1252 <main>
      8a:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2e 17 	jmp	0x2e5c	; 0x2e5c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ea       	ldi	r26, 0xA7	; 167
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 56 17 	jmp	0x2eac	; 0x2eac <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 56 17 	jmp	0x2eac	; 0x2eac <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2e 17 	jmp	0x2e5c	; 0x2e5c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	87 ea       	ldi	r24, 0xA7	; 167
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 56 17 	jmp	0x2eac	; 0x2eac <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 56 17 	jmp	0x2eac	; 0x2eac <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 56 17 	jmp	0x2eac	; 0x2eac <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer0_callBack>:
uint8 key_num2[10];
uint8 key_num3[10];
uint8 pass1=0;
uint8 pass2=0;
uint8 i=0,j=0,k=0,flag=0,created=0,entered=0,show=0,change=1,unlock=2,confirmed=0,wrong=0;
void Timer0_callBack(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_counter++;
     b4e:	80 91 b6 00 	lds	r24, 0x00B6
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 b6 00 	sts	0x00B6, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <create_password>:
void create_password(void){
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	aa 97       	sbiw	r28, 0x2a	; 42
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
	if(key_num[pass1]!=13&&flag==0){
     b76:	80 91 b7 00 	lds	r24, 0x00B7
     b7a:	88 2f       	mov	r24, r24
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	fc 01       	movw	r30, r24
     b80:	ec 53       	subi	r30, 0x3C	; 60
     b82:	ff 4f       	sbci	r31, 0xFF	; 255
     b84:	80 81       	ld	r24, Z
     b86:	8d 30       	cpi	r24, 0x0D	; 13
     b88:	09 f4       	brne	.+2      	; 0xb8c <create_password+0x2e>
     b8a:	95 c0       	rjmp	.+298    	; 0xcb6 <create_password+0x158>
     b8c:	80 91 bc 00 	lds	r24, 0x00BC
     b90:	88 23       	and	r24, r24
     b92:	09 f0       	breq	.+2      	; 0xb96 <create_password+0x38>
     b94:	90 c0       	rjmp	.+288    	; 0xcb6 <create_password+0x158>
			/* Get the pressed button from keypad */
			key_num[pass1] = KEYPAD_getPressedKey();
     b96:	80 91 b7 00 	lds	r24, 0x00B7
     b9a:	08 2f       	mov	r16, r24
     b9c:	10 e0       	ldi	r17, 0x00	; 0
     b9e:	0e 94 34 10 	call	0x2068	; 0x2068 <KEYPAD_getPressedKey>
     ba2:	f8 01       	movw	r30, r16
     ba4:	ec 53       	subi	r30, 0x3C	; 60
     ba6:	ff 4f       	sbci	r31, 0xFF	; 255
     ba8:	80 83       	st	Z, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	aa ef       	ldi	r26, 0xFA	; 250
     bb0:	b3 e4       	ldi	r27, 0x43	; 67
     bb2:	8f a3       	std	Y+39, r24	; 0x27
     bb4:	98 a7       	std	Y+40, r25	; 0x28
     bb6:	a9 a7       	std	Y+41, r26	; 0x29
     bb8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bba:	6f a1       	ldd	r22, Y+39	; 0x27
     bbc:	78 a5       	ldd	r23, Y+40	; 0x28
     bbe:	89 a5       	ldd	r24, Y+41	; 0x29
     bc0:	9a a5       	ldd	r25, Y+42	; 0x2a
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	4a ef       	ldi	r20, 0xFA	; 250
     bc8:	54 e4       	ldi	r21, 0x44	; 68
     bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bce:	dc 01       	movw	r26, r24
     bd0:	cb 01       	movw	r24, r22
     bd2:	8b a3       	std	Y+35, r24	; 0x23
     bd4:	9c a3       	std	Y+36, r25	; 0x24
     bd6:	ad a3       	std	Y+37, r26	; 0x25
     bd8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     bda:	6b a1       	ldd	r22, Y+35	; 0x23
     bdc:	7c a1       	ldd	r23, Y+36	; 0x24
     bde:	8d a1       	ldd	r24, Y+37	; 0x25
     be0:	9e a1       	ldd	r25, Y+38	; 0x26
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e8       	ldi	r20, 0x80	; 128
     be8:	5f e3       	ldi	r21, 0x3F	; 63
     bea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bee:	88 23       	and	r24, r24
     bf0:	2c f4       	brge	.+10     	; 0xbfc <create_password+0x9e>
		__ticks = 1;
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	9a a3       	std	Y+34, r25	; 0x22
     bf8:	89 a3       	std	Y+33, r24	; 0x21
     bfa:	3f c0       	rjmp	.+126    	; 0xc7a <create_password+0x11c>
	else if (__tmp > 65535)
     bfc:	6b a1       	ldd	r22, Y+35	; 0x23
     bfe:	7c a1       	ldd	r23, Y+36	; 0x24
     c00:	8d a1       	ldd	r24, Y+37	; 0x25
     c02:	9e a1       	ldd	r25, Y+38	; 0x26
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	3f ef       	ldi	r19, 0xFF	; 255
     c08:	4f e7       	ldi	r20, 0x7F	; 127
     c0a:	57 e4       	ldi	r21, 0x47	; 71
     c0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c10:	18 16       	cp	r1, r24
     c12:	4c f5       	brge	.+82     	; 0xc66 <create_password+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c14:	6f a1       	ldd	r22, Y+39	; 0x27
     c16:	78 a5       	ldd	r23, Y+40	; 0x28
     c18:	89 a5       	ldd	r24, Y+41	; 0x29
     c1a:	9a a5       	ldd	r25, Y+42	; 0x2a
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	40 e2       	ldi	r20, 0x20	; 32
     c22:	51 e4       	ldi	r21, 0x41	; 65
     c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c28:	dc 01       	movw	r26, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	bc 01       	movw	r22, r24
     c2e:	cd 01       	movw	r24, r26
     c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c34:	dc 01       	movw	r26, r24
     c36:	cb 01       	movw	r24, r22
     c38:	9a a3       	std	Y+34, r25	; 0x22
     c3a:	89 a3       	std	Y+33, r24	; 0x21
     c3c:	0f c0       	rjmp	.+30     	; 0xc5c <create_password+0xfe>
     c3e:	88 ec       	ldi	r24, 0xC8	; 200
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	98 a3       	std	Y+32, r25	; 0x20
     c44:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c46:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c48:	98 a1       	ldd	r25, Y+32	; 0x20
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	f1 f7       	brne	.-4      	; 0xc4a <create_password+0xec>
     c4e:	98 a3       	std	Y+32, r25	; 0x20
     c50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c52:	89 a1       	ldd	r24, Y+33	; 0x21
     c54:	9a a1       	ldd	r25, Y+34	; 0x22
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	9a a3       	std	Y+34, r25	; 0x22
     c5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c5c:	89 a1       	ldd	r24, Y+33	; 0x21
     c5e:	9a a1       	ldd	r25, Y+34	; 0x22
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	69 f7       	brne	.-38     	; 0xc3e <create_password+0xe0>
     c64:	14 c0       	rjmp	.+40     	; 0xc8e <create_password+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c66:	6b a1       	ldd	r22, Y+35	; 0x23
     c68:	7c a1       	ldd	r23, Y+36	; 0x24
     c6a:	8d a1       	ldd	r24, Y+37	; 0x25
     c6c:	9e a1       	ldd	r25, Y+38	; 0x26
     c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c72:	dc 01       	movw	r26, r24
     c74:	cb 01       	movw	r24, r22
     c76:	9a a3       	std	Y+34, r25	; 0x22
     c78:	89 a3       	std	Y+33, r24	; 0x21
     c7a:	89 a1       	ldd	r24, Y+33	; 0x21
     c7c:	9a a1       	ldd	r25, Y+34	; 0x22
     c7e:	9e 8f       	std	Y+30, r25	; 0x1e
     c80:	8d 8f       	std	Y+29, r24	; 0x1d
     c82:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c84:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	f1 f7       	brne	.-4      	; 0xc86 <create_password+0x128>
     c8a:	9e 8f       	std	Y+30, r25	; 0x1e
     c8c:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
			if(key_num[pass1]!=13){
     c8e:	80 91 b7 00 	lds	r24, 0x00B7
     c92:	88 2f       	mov	r24, r24
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	fc 01       	movw	r30, r24
     c98:	ec 53       	subi	r30, 0x3C	; 60
     c9a:	ff 4f       	sbci	r31, 0xFF	; 255
     c9c:	80 81       	ld	r24, Z
     c9e:	8d 30       	cpi	r24, 0x0D	; 13
     ca0:	09 f4       	brne	.+2      	; 0xca4 <create_password+0x146>
     ca2:	85 c1       	rjmp	.+778    	; 0xfae <create_password+0x450>
				 LCD_displayCharacter('*');
     ca4:	8a e2       	ldi	r24, 0x2A	; 42
     ca6:	0e 94 43 13 	call	0x2686	; 0x2686 <LCD_displayCharacter>
				 pass1++;
     caa:	80 91 b7 00 	lds	r24, 0x00B7
     cae:	8f 5f       	subi	r24, 0xFF	; 255
     cb0:	80 93 b7 00 	sts	0x00B7, r24
     cb4:	7c c1       	rjmp	.+760    	; 0xfae <create_password+0x450>
			}
		 //   _delay_ms(500);
			}
	else if(key_num2[pass2]!=13)
     cb6:	80 91 b8 00 	lds	r24, 0x00B8
     cba:	88 2f       	mov	r24, r24
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	fc 01       	movw	r30, r24
     cc0:	e2 53       	subi	r30, 0x32	; 50
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	80 81       	ld	r24, Z
     cc6:	8d 30       	cpi	r24, 0x0D	; 13
     cc8:	09 f4       	brne	.+2      	; 0xccc <create_password+0x16e>
     cca:	a0 c0       	rjmp	.+320    	; 0xe0c <create_password+0x2ae>
	{
			flag=1;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	80 93 bc 00 	sts	0x00BC, r24
			LCD_displayStringRowColumn(0,0,"Reenter Password");
     cd2:	20 e6       	ldi	r18, 0x60	; 96
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	a9 01       	movw	r20, r18
     cdc:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_displayStringRowColumn>
			LCD_moveCursor(1,pass2);
     ce0:	90 91 b8 00 	lds	r25, 0x00B8
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	69 2f       	mov	r22, r25
     ce8:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <LCD_moveCursor>
			/* Get the pressed button from keypad */
			key_num2[pass2] = KEYPAD_getPressedKey();
     cec:	80 91 b8 00 	lds	r24, 0x00B8
     cf0:	08 2f       	mov	r16, r24
     cf2:	10 e0       	ldi	r17, 0x00	; 0
     cf4:	0e 94 34 10 	call	0x2068	; 0x2068 <KEYPAD_getPressedKey>
     cf8:	f8 01       	movw	r30, r16
     cfa:	e2 53       	subi	r30, 0x32	; 50
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	80 83       	st	Z, r24
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	aa ef       	ldi	r26, 0xFA	; 250
     d06:	b3 e4       	ldi	r27, 0x43	; 67
     d08:	89 8f       	std	Y+25, r24	; 0x19
     d0a:	9a 8f       	std	Y+26, r25	; 0x1a
     d0c:	ab 8f       	std	Y+27, r26	; 0x1b
     d0e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d10:	69 8d       	ldd	r22, Y+25	; 0x19
     d12:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d14:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d16:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	4a ef       	ldi	r20, 0xFA	; 250
     d1e:	54 e4       	ldi	r21, 0x44	; 68
     d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	8d 8b       	std	Y+21, r24	; 0x15
     d2a:	9e 8b       	std	Y+22, r25	; 0x16
     d2c:	af 8b       	std	Y+23, r26	; 0x17
     d2e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d30:	6d 89       	ldd	r22, Y+21	; 0x15
     d32:	7e 89       	ldd	r23, Y+22	; 0x16
     d34:	8f 89       	ldd	r24, Y+23	; 0x17
     d36:	98 8d       	ldd	r25, Y+24	; 0x18
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	40 e8       	ldi	r20, 0x80	; 128
     d3e:	5f e3       	ldi	r21, 0x3F	; 63
     d40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d44:	88 23       	and	r24, r24
     d46:	2c f4       	brge	.+10     	; 0xd52 <create_password+0x1f4>
		__ticks = 1;
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	9c 8b       	std	Y+20, r25	; 0x14
     d4e:	8b 8b       	std	Y+19, r24	; 0x13
     d50:	3f c0       	rjmp	.+126    	; 0xdd0 <create_password+0x272>
	else if (__tmp > 65535)
     d52:	6d 89       	ldd	r22, Y+21	; 0x15
     d54:	7e 89       	ldd	r23, Y+22	; 0x16
     d56:	8f 89       	ldd	r24, Y+23	; 0x17
     d58:	98 8d       	ldd	r25, Y+24	; 0x18
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	3f ef       	ldi	r19, 0xFF	; 255
     d5e:	4f e7       	ldi	r20, 0x7F	; 127
     d60:	57 e4       	ldi	r21, 0x47	; 71
     d62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d66:	18 16       	cp	r1, r24
     d68:	4c f5       	brge	.+82     	; 0xdbc <create_password+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d6a:	69 8d       	ldd	r22, Y+25	; 0x19
     d6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d70:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e2       	ldi	r20, 0x20	; 32
     d78:	51 e4       	ldi	r21, 0x41	; 65
     d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	bc 01       	movw	r22, r24
     d84:	cd 01       	movw	r24, r26
     d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	9c 8b       	std	Y+20, r25	; 0x14
     d90:	8b 8b       	std	Y+19, r24	; 0x13
     d92:	0f c0       	rjmp	.+30     	; 0xdb2 <create_password+0x254>
     d94:	88 ec       	ldi	r24, 0xC8	; 200
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	9a 8b       	std	Y+18, r25	; 0x12
     d9a:	89 8b       	std	Y+17, r24	; 0x11
     d9c:	89 89       	ldd	r24, Y+17	; 0x11
     d9e:	9a 89       	ldd	r25, Y+18	; 0x12
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	f1 f7       	brne	.-4      	; 0xda0 <create_password+0x242>
     da4:	9a 8b       	std	Y+18, r25	; 0x12
     da6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da8:	8b 89       	ldd	r24, Y+19	; 0x13
     daa:	9c 89       	ldd	r25, Y+20	; 0x14
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	9c 8b       	std	Y+20, r25	; 0x14
     db0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db2:	8b 89       	ldd	r24, Y+19	; 0x13
     db4:	9c 89       	ldd	r25, Y+20	; 0x14
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	69 f7       	brne	.-38     	; 0xd94 <create_password+0x236>
     dba:	14 c0       	rjmp	.+40     	; 0xde4 <create_password+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dbc:	6d 89       	ldd	r22, Y+21	; 0x15
     dbe:	7e 89       	ldd	r23, Y+22	; 0x16
     dc0:	8f 89       	ldd	r24, Y+23	; 0x17
     dc2:	98 8d       	ldd	r25, Y+24	; 0x18
     dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	9c 8b       	std	Y+20, r25	; 0x14
     dce:	8b 8b       	std	Y+19, r24	; 0x13
     dd0:	8b 89       	ldd	r24, Y+19	; 0x13
     dd2:	9c 89       	ldd	r25, Y+20	; 0x14
     dd4:	98 8b       	std	Y+16, r25	; 0x10
     dd6:	8f 87       	std	Y+15, r24	; 0x0f
     dd8:	8f 85       	ldd	r24, Y+15	; 0x0f
     dda:	98 89       	ldd	r25, Y+16	; 0x10
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	f1 f7       	brne	.-4      	; 0xddc <create_password+0x27e>
     de0:	98 8b       	std	Y+16, r25	; 0x10
     de2:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			if(key_num[pass2]!=13){
     de4:	80 91 b8 00 	lds	r24, 0x00B8
     de8:	88 2f       	mov	r24, r24
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	fc 01       	movw	r30, r24
     dee:	ec 53       	subi	r30, 0x3C	; 60
     df0:	ff 4f       	sbci	r31, 0xFF	; 255
     df2:	80 81       	ld	r24, Z
     df4:	8d 30       	cpi	r24, 0x0D	; 13
     df6:	09 f4       	brne	.+2      	; 0xdfa <create_password+0x29c>
     df8:	da c0       	rjmp	.+436    	; 0xfae <create_password+0x450>
		    LCD_displayCharacter('*');
     dfa:	8a e2       	ldi	r24, 0x2A	; 42
     dfc:	0e 94 43 13 	call	0x2686	; 0x2686 <LCD_displayCharacter>
			pass2++;
     e00:	80 91 b8 00 	lds	r24, 0x00B8
     e04:	8f 5f       	subi	r24, 0xFF	; 255
     e06:	80 93 b8 00 	sts	0x00B8, r24
     e0a:	d1 c0       	rjmp	.+418    	; 0xfae <create_password+0x450>
			}
			//_delay_ms(500);
	}
	else{
		for(i=0, j=0;i<pass1;i++){
     e0c:	10 92 b9 00 	sts	0x00B9, r1
     e10:	10 92 ba 00 	sts	0x00BA, r1
     e14:	1c c0       	rjmp	.+56     	; 0xe4e <create_password+0x2f0>
			if(key_num[i]==key_num2[j]){
     e16:	80 91 b9 00 	lds	r24, 0x00B9
     e1a:	88 2f       	mov	r24, r24
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	fc 01       	movw	r30, r24
     e20:	ec 53       	subi	r30, 0x3C	; 60
     e22:	ff 4f       	sbci	r31, 0xFF	; 255
     e24:	20 81       	ld	r18, Z
     e26:	80 91 ba 00 	lds	r24, 0x00BA
     e2a:	88 2f       	mov	r24, r24
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	fc 01       	movw	r30, r24
     e30:	e2 53       	subi	r30, 0x32	; 50
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	80 81       	ld	r24, Z
     e36:	28 17       	cp	r18, r24
     e38:	29 f4       	brne	.+10     	; 0xe44 <create_password+0x2e6>
					j++;
     e3a:	80 91 ba 00 	lds	r24, 0x00BA
     e3e:	8f 5f       	subi	r24, 0xFF	; 255
     e40:	80 93 ba 00 	sts	0x00BA, r24
			pass2++;
			}
			//_delay_ms(500);
	}
	else{
		for(i=0, j=0;i<pass1;i++){
     e44:	80 91 b9 00 	lds	r24, 0x00B9
     e48:	8f 5f       	subi	r24, 0xFF	; 255
     e4a:	80 93 b9 00 	sts	0x00B9, r24
     e4e:	90 91 b9 00 	lds	r25, 0x00B9
     e52:	80 91 b7 00 	lds	r24, 0x00B7
     e56:	98 17       	cp	r25, r24
     e58:	f0 f2       	brcs	.-68     	; 0xe16 <create_password+0x2b8>
			if(key_num[i]==key_num2[j]){
					j++;
		}
		}
		if(i==j){/*if true send it by UART to save in EEPROM*/
     e5a:	90 91 b9 00 	lds	r25, 0x00B9
     e5e:	80 91 ba 00 	lds	r24, 0x00BA
     e62:	98 17       	cp	r25, r24
     e64:	09 f0       	breq	.+2      	; 0xe68 <create_password+0x30a>
     e66:	8f c0       	rjmp	.+286    	; 0xf86 <create_password+0x428>
			for(i=0;i<pass1;i++){
     e68:	10 92 b9 00 	sts	0x00B9, r1
     e6c:	81 c0       	rjmp	.+258    	; 0xf70 <create_password+0x412>
					UART_sendByte(key_num[i]);
     e6e:	80 91 b9 00 	lds	r24, 0x00B9
     e72:	88 2f       	mov	r24, r24
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	fc 01       	movw	r30, r24
     e78:	ec 53       	subi	r30, 0x3C	; 60
     e7a:	ff 4f       	sbci	r31, 0xFF	; 255
     e7c:	80 81       	ld	r24, Z
     e7e:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <UART_sendByte>
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	a0 ef       	ldi	r26, 0xF0	; 240
     e88:	b1 e4       	ldi	r27, 0x41	; 65
     e8a:	8b 87       	std	Y+11, r24	; 0x0b
     e8c:	9c 87       	std	Y+12, r25	; 0x0c
     e8e:	ad 87       	std	Y+13, r26	; 0x0d
     e90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e92:	6b 85       	ldd	r22, Y+11	; 0x0b
     e94:	7c 85       	ldd	r23, Y+12	; 0x0c
     e96:	8d 85       	ldd	r24, Y+13	; 0x0d
     e98:	9e 85       	ldd	r25, Y+14	; 0x0e
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	4a ef       	ldi	r20, 0xFA	; 250
     ea0:	54 e4       	ldi	r21, 0x44	; 68
     ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	8f 83       	std	Y+7, r24	; 0x07
     eac:	98 87       	std	Y+8, r25	; 0x08
     eae:	a9 87       	std	Y+9, r26	; 0x09
     eb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eb2:	6f 81       	ldd	r22, Y+7	; 0x07
     eb4:	78 85       	ldd	r23, Y+8	; 0x08
     eb6:	89 85       	ldd	r24, Y+9	; 0x09
     eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	40 e8       	ldi	r20, 0x80	; 128
     ec0:	5f e3       	ldi	r21, 0x3F	; 63
     ec2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ec6:	88 23       	and	r24, r24
     ec8:	2c f4       	brge	.+10     	; 0xed4 <create_password+0x376>
		__ticks = 1;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	9e 83       	std	Y+6, r25	; 0x06
     ed0:	8d 83       	std	Y+5, r24	; 0x05
     ed2:	3f c0       	rjmp	.+126    	; 0xf52 <create_password+0x3f4>
	else if (__tmp > 65535)
     ed4:	6f 81       	ldd	r22, Y+7	; 0x07
     ed6:	78 85       	ldd	r23, Y+8	; 0x08
     ed8:	89 85       	ldd	r24, Y+9	; 0x09
     eda:	9a 85       	ldd	r25, Y+10	; 0x0a
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	3f ef       	ldi	r19, 0xFF	; 255
     ee0:	4f e7       	ldi	r20, 0x7F	; 127
     ee2:	57 e4       	ldi	r21, 0x47	; 71
     ee4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ee8:	18 16       	cp	r1, r24
     eea:	4c f5       	brge	.+82     	; 0xf3e <create_password+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eec:	6b 85       	ldd	r22, Y+11	; 0x0b
     eee:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e2       	ldi	r20, 0x20	; 32
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	bc 01       	movw	r22, r24
     f06:	cd 01       	movw	r24, r26
     f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	9e 83       	std	Y+6, r25	; 0x06
     f12:	8d 83       	std	Y+5, r24	; 0x05
     f14:	0f c0       	rjmp	.+30     	; 0xf34 <create_password+0x3d6>
     f16:	88 ec       	ldi	r24, 0xC8	; 200
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	9c 83       	std	Y+4, r25	; 0x04
     f1c:	8b 83       	std	Y+3, r24	; 0x03
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	9c 81       	ldd	r25, Y+4	; 0x04
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	f1 f7       	brne	.-4      	; 0xf22 <create_password+0x3c4>
     f26:	9c 83       	std	Y+4, r25	; 0x04
     f28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	9e 81       	ldd	r25, Y+6	; 0x06
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	9e 83       	std	Y+6, r25	; 0x06
     f32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	69 f7       	brne	.-38     	; 0xf16 <create_password+0x3b8>
     f3c:	14 c0       	rjmp	.+40     	; 0xf66 <create_password+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3e:	6f 81       	ldd	r22, Y+7	; 0x07
     f40:	78 85       	ldd	r23, Y+8	; 0x08
     f42:	89 85       	ldd	r24, Y+9	; 0x09
     f44:	9a 85       	ldd	r25, Y+10	; 0x0a
     f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	9e 83       	std	Y+6, r25	; 0x06
     f50:	8d 83       	std	Y+5, r24	; 0x05
     f52:	8d 81       	ldd	r24, Y+5	; 0x05
     f54:	9e 81       	ldd	r25, Y+6	; 0x06
     f56:	9a 83       	std	Y+2, r25	; 0x02
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	9a 81       	ldd	r25, Y+2	; 0x02
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	f1 f7       	brne	.-4      	; 0xf5e <create_password+0x400>
     f62:	9a 83       	std	Y+2, r25	; 0x02
     f64:	89 83       	std	Y+1, r24	; 0x01
			if(key_num[i]==key_num2[j]){
					j++;
		}
		}
		if(i==j){/*if true send it by UART to save in EEPROM*/
			for(i=0;i<pass1;i++){
     f66:	80 91 b9 00 	lds	r24, 0x00B9
     f6a:	8f 5f       	subi	r24, 0xFF	; 255
     f6c:	80 93 b9 00 	sts	0x00B9, r24
     f70:	90 91 b9 00 	lds	r25, 0x00B9
     f74:	80 91 b7 00 	lds	r24, 0x00B7
     f78:	98 17       	cp	r25, r24
     f7a:	08 f4       	brcc	.+2      	; 0xf7e <create_password+0x420>
     f7c:	78 cf       	rjmp	.-272    	; 0xe6e <create_password+0x310>
					UART_sendByte(key_num[i]);
					_delay_ms(30);
			}
			created=1;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	80 93 bd 00 	sts	0x00BD, r24
     f84:	14 c0       	rjmp	.+40     	; 0xfae <create_password+0x450>
	   }
		else{/*if not repeat the first step*/
						LCD_clearScreen();
     f86:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_clearScreen>
						LCD_displayString("Enter Password: ");
     f8a:	81 e7       	ldi	r24, 0x71	; 113
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <LCD_displayString>
						LCD_moveCursor(1,0);
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <LCD_moveCursor>
						key_num[10]=0;
     f9a:	10 92 ce 00 	sts	0x00CE, r1
						key_num2[10]=0;
     f9e:	10 92 d8 00 	sts	0x00D8, r1
						pass1=0,pass2=0,flag=0;
     fa2:	10 92 b7 00 	sts	0x00B7, r1
     fa6:	10 92 b8 00 	sts	0x00B8, r1
     faa:	10 92 bc 00 	sts	0x00BC, r1
						//create_password();
	}

}
}
     fae:	aa 96       	adiw	r28, 0x2a	; 42
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	08 95       	ret

00000fc4 <enter_password>:
void enter_password(void){
     fc4:	0f 93       	push	r16
     fc6:	1f 93       	push	r17
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	6c 97       	sbiw	r28, 0x1c	; 28
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	f8 94       	cli
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	cd bf       	out	0x3d, r28	; 61
		/* Get the pressed button from keypad */
	if(key_num3[k]!=13){
     fdc:	80 91 bb 00 	lds	r24, 0x00BB
     fe0:	88 2f       	mov	r24, r24
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	fc 01       	movw	r30, r24
     fe6:	e8 52       	subi	r30, 0x28	; 40
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	80 81       	ld	r24, Z
     fec:	8d 30       	cpi	r24, 0x0D	; 13
     fee:	09 f4       	brne	.+2      	; 0xff2 <enter_password+0x2e>
     ff0:	0b c1       	rjmp	.+534    	; 0x1208 <enter_password+0x244>
		key_num3[k] = KEYPAD_getPressedKey();
     ff2:	80 91 bb 00 	lds	r24, 0x00BB
     ff6:	08 2f       	mov	r16, r24
     ff8:	10 e0       	ldi	r17, 0x00	; 0
     ffa:	0e 94 34 10 	call	0x2068	; 0x2068 <KEYPAD_getPressedKey>
     ffe:	f8 01       	movw	r30, r16
    1000:	e8 52       	subi	r30, 0x28	; 40
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	80 83       	st	Z, r24
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	aa ef       	ldi	r26, 0xFA	; 250
    100c:	b3 e4       	ldi	r27, 0x43	; 67
    100e:	89 8f       	std	Y+25, r24	; 0x19
    1010:	9a 8f       	std	Y+26, r25	; 0x1a
    1012:	ab 8f       	std	Y+27, r26	; 0x1b
    1014:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1016:	69 8d       	ldd	r22, Y+25	; 0x19
    1018:	7a 8d       	ldd	r23, Y+26	; 0x1a
    101a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    101c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	4a ef       	ldi	r20, 0xFA	; 250
    1024:	54 e4       	ldi	r21, 0x44	; 68
    1026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    102a:	dc 01       	movw	r26, r24
    102c:	cb 01       	movw	r24, r22
    102e:	8d 8b       	std	Y+21, r24	; 0x15
    1030:	9e 8b       	std	Y+22, r25	; 0x16
    1032:	af 8b       	std	Y+23, r26	; 0x17
    1034:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1036:	6d 89       	ldd	r22, Y+21	; 0x15
    1038:	7e 89       	ldd	r23, Y+22	; 0x16
    103a:	8f 89       	ldd	r24, Y+23	; 0x17
    103c:	98 8d       	ldd	r25, Y+24	; 0x18
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e8       	ldi	r20, 0x80	; 128
    1044:	5f e3       	ldi	r21, 0x3F	; 63
    1046:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    104a:	88 23       	and	r24, r24
    104c:	2c f4       	brge	.+10     	; 0x1058 <enter_password+0x94>
		__ticks = 1;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	9c 8b       	std	Y+20, r25	; 0x14
    1054:	8b 8b       	std	Y+19, r24	; 0x13
    1056:	3f c0       	rjmp	.+126    	; 0x10d6 <enter_password+0x112>
	else if (__tmp > 65535)
    1058:	6d 89       	ldd	r22, Y+21	; 0x15
    105a:	7e 89       	ldd	r23, Y+22	; 0x16
    105c:	8f 89       	ldd	r24, Y+23	; 0x17
    105e:	98 8d       	ldd	r25, Y+24	; 0x18
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	3f ef       	ldi	r19, 0xFF	; 255
    1064:	4f e7       	ldi	r20, 0x7F	; 127
    1066:	57 e4       	ldi	r21, 0x47	; 71
    1068:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    106c:	18 16       	cp	r1, r24
    106e:	4c f5       	brge	.+82     	; 0x10c2 <enter_password+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1070:	69 8d       	ldd	r22, Y+25	; 0x19
    1072:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1074:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1076:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	40 e2       	ldi	r20, 0x20	; 32
    107e:	51 e4       	ldi	r21, 0x41	; 65
    1080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	bc 01       	movw	r22, r24
    108a:	cd 01       	movw	r24, r26
    108c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	9c 8b       	std	Y+20, r25	; 0x14
    1096:	8b 8b       	std	Y+19, r24	; 0x13
    1098:	0f c0       	rjmp	.+30     	; 0x10b8 <enter_password+0xf4>
    109a:	88 ec       	ldi	r24, 0xC8	; 200
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	9a 8b       	std	Y+18, r25	; 0x12
    10a0:	89 8b       	std	Y+17, r24	; 0x11
    10a2:	89 89       	ldd	r24, Y+17	; 0x11
    10a4:	9a 89       	ldd	r25, Y+18	; 0x12
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <enter_password+0xe2>
    10aa:	9a 8b       	std	Y+18, r25	; 0x12
    10ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ae:	8b 89       	ldd	r24, Y+19	; 0x13
    10b0:	9c 89       	ldd	r25, Y+20	; 0x14
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	9c 8b       	std	Y+20, r25	; 0x14
    10b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b8:	8b 89       	ldd	r24, Y+19	; 0x13
    10ba:	9c 89       	ldd	r25, Y+20	; 0x14
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	69 f7       	brne	.-38     	; 0x109a <enter_password+0xd6>
    10c0:	14 c0       	rjmp	.+40     	; 0x10ea <enter_password+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10c2:	6d 89       	ldd	r22, Y+21	; 0x15
    10c4:	7e 89       	ldd	r23, Y+22	; 0x16
    10c6:	8f 89       	ldd	r24, Y+23	; 0x17
    10c8:	98 8d       	ldd	r25, Y+24	; 0x18
    10ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	9c 8b       	std	Y+20, r25	; 0x14
    10d4:	8b 8b       	std	Y+19, r24	; 0x13
    10d6:	8b 89       	ldd	r24, Y+19	; 0x13
    10d8:	9c 89       	ldd	r25, Y+20	; 0x14
    10da:	98 8b       	std	Y+16, r25	; 0x10
    10dc:	8f 87       	std	Y+15, r24	; 0x0f
    10de:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e0:	98 89       	ldd	r25, Y+16	; 0x10
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	f1 f7       	brne	.-4      	; 0x10e2 <enter_password+0x11e>
    10e6:	98 8b       	std	Y+16, r25	; 0x10
    10e8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		if(key_num3[k]!=13){
    10ea:	80 91 bb 00 	lds	r24, 0x00BB
    10ee:	88 2f       	mov	r24, r24
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	fc 01       	movw	r30, r24
    10f4:	e8 52       	subi	r30, 0x28	; 40
    10f6:	ff 4f       	sbci	r31, 0xFF	; 255
    10f8:	80 81       	ld	r24, Z
    10fa:	8d 30       	cpi	r24, 0x0D	; 13
    10fc:	09 f4       	brne	.+2      	; 0x1100 <enter_password+0x13c>
    10fe:	84 c0       	rjmp	.+264    	; 0x1208 <enter_password+0x244>
			LCD_displayCharacter('*');
    1100:	8a e2       	ldi	r24, 0x2A	; 42
    1102:	0e 94 43 13 	call	0x2686	; 0x2686 <LCD_displayCharacter>
			UART_sendByte(key_num3[k]);
    1106:	80 91 bb 00 	lds	r24, 0x00BB
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	fc 01       	movw	r30, r24
    1110:	e8 52       	subi	r30, 0x28	; 40
    1112:	ff 4f       	sbci	r31, 0xFF	; 255
    1114:	80 81       	ld	r24, Z
    1116:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <UART_sendByte>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	a0 ef       	ldi	r26, 0xF0	; 240
    1120:	b1 e4       	ldi	r27, 0x41	; 65
    1122:	8b 87       	std	Y+11, r24	; 0x0b
    1124:	9c 87       	std	Y+12, r25	; 0x0c
    1126:	ad 87       	std	Y+13, r26	; 0x0d
    1128:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112a:	6b 85       	ldd	r22, Y+11	; 0x0b
    112c:	7c 85       	ldd	r23, Y+12	; 0x0c
    112e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1130:	9e 85       	ldd	r25, Y+14	; 0x0e
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	4a ef       	ldi	r20, 0xFA	; 250
    1138:	54 e4       	ldi	r21, 0x44	; 68
    113a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	8f 83       	std	Y+7, r24	; 0x07
    1144:	98 87       	std	Y+8, r25	; 0x08
    1146:	a9 87       	std	Y+9, r26	; 0x09
    1148:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    114a:	6f 81       	ldd	r22, Y+7	; 0x07
    114c:	78 85       	ldd	r23, Y+8	; 0x08
    114e:	89 85       	ldd	r24, Y+9	; 0x09
    1150:	9a 85       	ldd	r25, Y+10	; 0x0a
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e8       	ldi	r20, 0x80	; 128
    1158:	5f e3       	ldi	r21, 0x3F	; 63
    115a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    115e:	88 23       	and	r24, r24
    1160:	2c f4       	brge	.+10     	; 0x116c <enter_password+0x1a8>
		__ticks = 1;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	9e 83       	std	Y+6, r25	; 0x06
    1168:	8d 83       	std	Y+5, r24	; 0x05
    116a:	3f c0       	rjmp	.+126    	; 0x11ea <enter_password+0x226>
	else if (__tmp > 65535)
    116c:	6f 81       	ldd	r22, Y+7	; 0x07
    116e:	78 85       	ldd	r23, Y+8	; 0x08
    1170:	89 85       	ldd	r24, Y+9	; 0x09
    1172:	9a 85       	ldd	r25, Y+10	; 0x0a
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	3f ef       	ldi	r19, 0xFF	; 255
    1178:	4f e7       	ldi	r20, 0x7F	; 127
    117a:	57 e4       	ldi	r21, 0x47	; 71
    117c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1180:	18 16       	cp	r1, r24
    1182:	4c f5       	brge	.+82     	; 0x11d6 <enter_password+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1184:	6b 85       	ldd	r22, Y+11	; 0x0b
    1186:	7c 85       	ldd	r23, Y+12	; 0x0c
    1188:	8d 85       	ldd	r24, Y+13	; 0x0d
    118a:	9e 85       	ldd	r25, Y+14	; 0x0e
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	40 e2       	ldi	r20, 0x20	; 32
    1192:	51 e4       	ldi	r21, 0x41	; 65
    1194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	bc 01       	movw	r22, r24
    119e:	cd 01       	movw	r24, r26
    11a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	9e 83       	std	Y+6, r25	; 0x06
    11aa:	8d 83       	std	Y+5, r24	; 0x05
    11ac:	0f c0       	rjmp	.+30     	; 0x11cc <enter_password+0x208>
    11ae:	88 ec       	ldi	r24, 0xC8	; 200
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	9c 83       	std	Y+4, r25	; 0x04
    11b4:	8b 83       	std	Y+3, r24	; 0x03
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <enter_password+0x1f6>
    11be:	9c 83       	std	Y+4, r25	; 0x04
    11c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c2:	8d 81       	ldd	r24, Y+5	; 0x05
    11c4:	9e 81       	ldd	r25, Y+6	; 0x06
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	9e 83       	std	Y+6, r25	; 0x06
    11ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11cc:	8d 81       	ldd	r24, Y+5	; 0x05
    11ce:	9e 81       	ldd	r25, Y+6	; 0x06
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	69 f7       	brne	.-38     	; 0x11ae <enter_password+0x1ea>
    11d4:	14 c0       	rjmp	.+40     	; 0x11fe <enter_password+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d6:	6f 81       	ldd	r22, Y+7	; 0x07
    11d8:	78 85       	ldd	r23, Y+8	; 0x08
    11da:	89 85       	ldd	r24, Y+9	; 0x09
    11dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	9e 83       	std	Y+6, r25	; 0x06
    11e8:	8d 83       	std	Y+5, r24	; 0x05
    11ea:	8d 81       	ldd	r24, Y+5	; 0x05
    11ec:	9e 81       	ldd	r25, Y+6	; 0x06
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	9a 81       	ldd	r25, Y+2	; 0x02
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	f1 f7       	brne	.-4      	; 0x11f6 <enter_password+0x232>
    11fa:	9a 83       	std	Y+2, r25	; 0x02
    11fc:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(30);
			k++;
    11fe:	80 91 bb 00 	lds	r24, 0x00BB
    1202:	8f 5f       	subi	r24, 0xFF	; 255
    1204:	80 93 bb 00 	sts	0x00BB, r24
				}
}
}
    1208:	6c 96       	adiw	r28, 0x1c	; 28
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	08 95       	ret

0000121e <main_menu>:
void main_menu(void){
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1226:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+: Open door");
    122a:	22 e8       	ldi	r18, 0x82	; 130
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	a9 01       	movw	r20, r18
    1234:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"-:changepassword");
    1238:	2f e8       	ldi	r18, 0x8F	; 143
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	a9 01       	movw	r20, r18
    1242:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_displayStringRowColumn>
	show=1;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	80 93 bf 00 	sts	0x00BF, r24
}
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <main>:
int main(){
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	c4 54       	subi	r28, 0x44	; 68
    125c:	d0 40       	sbci	r29, 0x00	; 0
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
    1268:	af e5       	ldi	r26, 0x5F	; 95
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	ef e5       	ldi	r30, 0x5F	; 95
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	80 68       	ori	r24, 0x80	; 128
    1274:	8c 93       	st	X, r24
	/* Create configuration structure for Timer0 driver */
	Timer0_ConfigType Timer0_Config = {F_CPU_1024,Normal};
    1276:	85 e0       	ldi	r24, 0x05	; 5
    1278:	89 af       	std	Y+57, r24	; 0x39
    127a:	1a ae       	std	Y+58, r1	; 0x3a
	/* Set the Call back function pointer in the Timer driver */
	Timer0_setCallBack(Timer0_callBack);
    127c:	83 ea       	ldi	r24, 0xA3	; 163
    127e:	95 e0       	ldi	r25, 0x05	; 5
    1280:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <Timer0_setCallBack>
	/* Initialize both the LCD and UART driver */
	LCD_init();
    1284:	0e 94 2c 11 	call	0x2258	; 0x2258 <LCD_init>
	Uart_ConfigType Uart_Config = {Disabled,One,Eight,9600};
    1288:	ce 01       	movw	r24, r28
    128a:	cb 96       	adiw	r24, 0x3b	; 59
    128c:	22 96       	adiw	r28, 0x02	; 2
    128e:	9f af       	std	Y+63, r25	; 0x3f
    1290:	8e af       	std	Y+62, r24	; 0x3e
    1292:	22 97       	sbiw	r28, 0x02	; 2
    1294:	e1 eb       	ldi	r30, 0xB1	; 177
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	24 96       	adiw	r28, 0x04	; 4
    129a:	ff af       	std	Y+63, r31	; 0x3f
    129c:	ee af       	std	Y+62, r30	; 0x3e
    129e:	24 97       	sbiw	r28, 0x04	; 4
    12a0:	f5 e0       	ldi	r31, 0x05	; 5
    12a2:	25 96       	adiw	r28, 0x05	; 5
    12a4:	ff af       	std	Y+63, r31	; 0x3f
    12a6:	25 97       	sbiw	r28, 0x05	; 5
    12a8:	24 96       	adiw	r28, 0x04	; 4
    12aa:	ee ad       	ldd	r30, Y+62	; 0x3e
    12ac:	ff ad       	ldd	r31, Y+63	; 0x3f
    12ae:	24 97       	sbiw	r28, 0x04	; 4
    12b0:	00 80       	ld	r0, Z
    12b2:	24 96       	adiw	r28, 0x04	; 4
    12b4:	8e ad       	ldd	r24, Y+62	; 0x3e
    12b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    12b8:	24 97       	sbiw	r28, 0x04	; 4
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	24 96       	adiw	r28, 0x04	; 4
    12be:	9f af       	std	Y+63, r25	; 0x3f
    12c0:	8e af       	std	Y+62, r24	; 0x3e
    12c2:	24 97       	sbiw	r28, 0x04	; 4
    12c4:	22 96       	adiw	r28, 0x02	; 2
    12c6:	ee ad       	ldd	r30, Y+62	; 0x3e
    12c8:	ff ad       	ldd	r31, Y+63	; 0x3f
    12ca:	22 97       	sbiw	r28, 0x02	; 2
    12cc:	00 82       	st	Z, r0
    12ce:	22 96       	adiw	r28, 0x02	; 2
    12d0:	8e ad       	ldd	r24, Y+62	; 0x3e
    12d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    12d4:	22 97       	sbiw	r28, 0x02	; 2
    12d6:	01 96       	adiw	r24, 0x01	; 1
    12d8:	22 96       	adiw	r28, 0x02	; 2
    12da:	9f af       	std	Y+63, r25	; 0x3f
    12dc:	8e af       	std	Y+62, r24	; 0x3e
    12de:	22 97       	sbiw	r28, 0x02	; 2
    12e0:	25 96       	adiw	r28, 0x05	; 5
    12e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    12e4:	25 97       	sbiw	r28, 0x05	; 5
    12e6:	91 50       	subi	r25, 0x01	; 1
    12e8:	25 96       	adiw	r28, 0x05	; 5
    12ea:	9f af       	std	Y+63, r25	; 0x3f
    12ec:	25 97       	sbiw	r28, 0x05	; 5
    12ee:	25 96       	adiw	r28, 0x05	; 5
    12f0:	ef ad       	ldd	r30, Y+63	; 0x3f
    12f2:	25 97       	sbiw	r28, 0x05	; 5
    12f4:	ee 23       	and	r30, r30
    12f6:	c1 f6       	brne	.-80     	; 0x12a8 <main+0x56>
	UART_init(&Uart_Config);
    12f8:	ce 01       	movw	r24, r28
    12fa:	cb 96       	adiw	r24, 0x3b	; 59
    12fc:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <UART_init>
	LCD_displayString("Enter Password: ");
    1300:	81 e7       	ldi	r24, 0x71	; 113
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <LCD_displayString>
	LCD_moveCursor(1,0);
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <LCD_moveCursor>
	while(1){
        if(created==0)
    1310:	80 91 bd 00 	lds	r24, 0x00BD
    1314:	88 23       	and	r24, r24
    1316:	19 f4       	brne	.+6      	; 0x131e <main+0xcc>
        	create_password();
    1318:	0e 94 af 05 	call	0xb5e	; 0xb5e <create_password>
    131c:	f9 cf       	rjmp	.-14     	; 0x1310 <main+0xbe>
        else if(show==0)
    131e:	80 91 bf 00 	lds	r24, 0x00BF
    1322:	88 23       	and	r24, r24
    1324:	19 f4       	brne	.+6      	; 0x132c <main+0xda>
            main_menu();
    1326:	0e 94 0f 09 	call	0x121e	; 0x121e <main_menu>
    132a:	f2 cf       	rjmp	.-28     	; 0x1310 <main+0xbe>
        else if(KEYPAD_getPressedKey()=='+'){
    132c:	0e 94 34 10 	call	0x2068	; 0x2068 <KEYPAD_getPressedKey>
    1330:	8b 32       	cpi	r24, 0x2B	; 43
    1332:	09 f0       	breq	.+2      	; 0x1336 <main+0xe4>
    1334:	24 c1       	rjmp	.+584    	; 0x157e <main+0x32c>
        	UART_sendByte(unlock);
    1336:	80 91 b0 00 	lds	r24, 0x00B0
    133a:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <UART_sendByte>
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	aa ef       	ldi	r26, 0xFA	; 250
    1344:	b3 e4       	ldi	r27, 0x43	; 67
    1346:	8d ab       	std	Y+53, r24	; 0x35
    1348:	9e ab       	std	Y+54, r25	; 0x36
    134a:	af ab       	std	Y+55, r26	; 0x37
    134c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    134e:	6d a9       	ldd	r22, Y+53	; 0x35
    1350:	7e a9       	ldd	r23, Y+54	; 0x36
    1352:	8f a9       	ldd	r24, Y+55	; 0x37
    1354:	98 ad       	ldd	r25, Y+56	; 0x38
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	4a ef       	ldi	r20, 0xFA	; 250
    135c:	54 e4       	ldi	r21, 0x44	; 68
    135e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	89 ab       	std	Y+49, r24	; 0x31
    1368:	9a ab       	std	Y+50, r25	; 0x32
    136a:	ab ab       	std	Y+51, r26	; 0x33
    136c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    136e:	69 a9       	ldd	r22, Y+49	; 0x31
    1370:	7a a9       	ldd	r23, Y+50	; 0x32
    1372:	8b a9       	ldd	r24, Y+51	; 0x33
    1374:	9c a9       	ldd	r25, Y+52	; 0x34
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e8       	ldi	r20, 0x80	; 128
    137c:	5f e3       	ldi	r21, 0x3F	; 63
    137e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1382:	88 23       	and	r24, r24
    1384:	2c f4       	brge	.+10     	; 0x1390 <main+0x13e>
		__ticks = 1;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	98 ab       	std	Y+48, r25	; 0x30
    138c:	8f a7       	std	Y+47, r24	; 0x2f
    138e:	3f c0       	rjmp	.+126    	; 0x140e <main+0x1bc>
	else if (__tmp > 65535)
    1390:	69 a9       	ldd	r22, Y+49	; 0x31
    1392:	7a a9       	ldd	r23, Y+50	; 0x32
    1394:	8b a9       	ldd	r24, Y+51	; 0x33
    1396:	9c a9       	ldd	r25, Y+52	; 0x34
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	3f ef       	ldi	r19, 0xFF	; 255
    139c:	4f e7       	ldi	r20, 0x7F	; 127
    139e:	57 e4       	ldi	r21, 0x47	; 71
    13a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13a4:	18 16       	cp	r1, r24
    13a6:	4c f5       	brge	.+82     	; 0x13fa <main+0x1a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a8:	6d a9       	ldd	r22, Y+53	; 0x35
    13aa:	7e a9       	ldd	r23, Y+54	; 0x36
    13ac:	8f a9       	ldd	r24, Y+55	; 0x37
    13ae:	98 ad       	ldd	r25, Y+56	; 0x38
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	40 e2       	ldi	r20, 0x20	; 32
    13b6:	51 e4       	ldi	r21, 0x41	; 65
    13b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	bc 01       	movw	r22, r24
    13c2:	cd 01       	movw	r24, r26
    13c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	98 ab       	std	Y+48, r25	; 0x30
    13ce:	8f a7       	std	Y+47, r24	; 0x2f
    13d0:	0f c0       	rjmp	.+30     	; 0x13f0 <main+0x19e>
    13d2:	88 ec       	ldi	r24, 0xC8	; 200
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	9e a7       	std	Y+46, r25	; 0x2e
    13d8:	8d a7       	std	Y+45, r24	; 0x2d
    13da:	8d a5       	ldd	r24, Y+45	; 0x2d
    13dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	f1 f7       	brne	.-4      	; 0x13de <main+0x18c>
    13e2:	9e a7       	std	Y+46, r25	; 0x2e
    13e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    13e8:	98 a9       	ldd	r25, Y+48	; 0x30
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	98 ab       	std	Y+48, r25	; 0x30
    13ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    13f2:	98 a9       	ldd	r25, Y+48	; 0x30
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	69 f7       	brne	.-38     	; 0x13d2 <main+0x180>
    13f8:	14 c0       	rjmp	.+40     	; 0x1422 <main+0x1d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fa:	69 a9       	ldd	r22, Y+49	; 0x31
    13fc:	7a a9       	ldd	r23, Y+50	; 0x32
    13fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1400:	9c a9       	ldd	r25, Y+52	; 0x34
    1402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	98 ab       	std	Y+48, r25	; 0x30
    140c:	8f a7       	std	Y+47, r24	; 0x2f
    140e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1410:	98 a9       	ldd	r25, Y+48	; 0x30
    1412:	9c a7       	std	Y+44, r25	; 0x2c
    1414:	8b a7       	std	Y+43, r24	; 0x2b
    1416:	8b a5       	ldd	r24, Y+43	; 0x2b
    1418:	9c a5       	ldd	r25, Y+44	; 0x2c
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	f1 f7       	brne	.-4      	; 0x141a <main+0x1c8>
    141e:	9c a7       	std	Y+44, r25	; 0x2c
    1420:	8b a7       	std	Y+43, r24	; 0x2b
            _delay_ms(500);
            LCD_clearScreen();
    1422:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_clearScreen>
            LCD_displayString("Enter Password: ");
    1426:	81 e7       	ldi	r24, 0x71	; 113
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <LCD_displayString>
            LCD_moveCursor(1,0);
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <LCD_moveCursor>
            for(i=0;i<pass1;i++){
    1436:	10 92 b9 00 	sts	0x00B9, r1
    143a:	07 c0       	rjmp	.+14     	; 0x144a <main+0x1f8>
                enter_password();
    143c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <enter_password>
        	UART_sendByte(unlock);
            _delay_ms(500);
            LCD_clearScreen();
            LCD_displayString("Enter Password: ");
            LCD_moveCursor(1,0);
            for(i=0;i<pass1;i++){
    1440:	80 91 b9 00 	lds	r24, 0x00B9
    1444:	8f 5f       	subi	r24, 0xFF	; 255
    1446:	80 93 b9 00 	sts	0x00B9, r24
    144a:	90 91 b9 00 	lds	r25, 0x00B9
    144e:	80 91 b7 00 	lds	r24, 0x00B7
    1452:	98 17       	cp	r25, r24
    1454:	98 f3       	brcs	.-26     	; 0x143c <main+0x1ea>
    1456:	04 c0       	rjmp	.+8      	; 0x1460 <main+0x20e>
                enter_password();
            }
            while(confirmed==0){
                confirmed=UART_recieveByte();
    1458:	0e 94 91 16 	call	0x2d22	; 0x2d22 <UART_recieveByte>
    145c:	80 93 c0 00 	sts	0x00C0, r24
            LCD_displayString("Enter Password: ");
            LCD_moveCursor(1,0);
            for(i=0;i<pass1;i++){
                enter_password();
            }
            while(confirmed==0){
    1460:	80 91 c0 00 	lds	r24, 0x00C0
    1464:	88 23       	and	r24, r24
    1466:	c1 f3       	breq	.-16     	; 0x1458 <main+0x206>
                confirmed=UART_recieveByte();
            }
            if(confirmed==1){}
    1468:	80 91 c0 00 	lds	r24, 0x00C0
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	09 f4       	brne	.+2      	; 0x1472 <main+0x220>
    1470:	4f cf       	rjmp	.-354    	; 0x1310 <main+0xbe>
            else if(confirmed==2){
    1472:	80 91 c0 00 	lds	r24, 0x00C0
    1476:	82 30       	cpi	r24, 0x02	; 2
    1478:	09 f0       	breq	.+2      	; 0x147c <main+0x22a>
    147a:	4a cf       	rjmp	.-364    	; 0x1310 <main+0xbe>
                LCD_clearScreen();
    147c:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_clearScreen>
              	LCD_displayString("wrong ");
    1480:	80 ea       	ldi	r24, 0xA0	; 160
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <LCD_displayString>
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	90 e6       	ldi	r25, 0x60	; 96
    148c:	aa e6       	ldi	r26, 0x6A	; 106
    148e:	b6 e4       	ldi	r27, 0x46	; 70
    1490:	8f a3       	std	Y+39, r24	; 0x27
    1492:	98 a7       	std	Y+40, r25	; 0x28
    1494:	a9 a7       	std	Y+41, r26	; 0x29
    1496:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1498:	6f a1       	ldd	r22, Y+39	; 0x27
    149a:	78 a5       	ldd	r23, Y+40	; 0x28
    149c:	89 a5       	ldd	r24, Y+41	; 0x29
    149e:	9a a5       	ldd	r25, Y+42	; 0x2a
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	4a ef       	ldi	r20, 0xFA	; 250
    14a6:	54 e4       	ldi	r21, 0x44	; 68
    14a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	8b a3       	std	Y+35, r24	; 0x23
    14b2:	9c a3       	std	Y+36, r25	; 0x24
    14b4:	ad a3       	std	Y+37, r26	; 0x25
    14b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14b8:	6b a1       	ldd	r22, Y+35	; 0x23
    14ba:	7c a1       	ldd	r23, Y+36	; 0x24
    14bc:	8d a1       	ldd	r24, Y+37	; 0x25
    14be:	9e a1       	ldd	r25, Y+38	; 0x26
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	40 e8       	ldi	r20, 0x80	; 128
    14c6:	5f e3       	ldi	r21, 0x3F	; 63
    14c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14cc:	88 23       	and	r24, r24
    14ce:	2c f4       	brge	.+10     	; 0x14da <main+0x288>
		__ticks = 1;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	9a a3       	std	Y+34, r25	; 0x22
    14d6:	89 a3       	std	Y+33, r24	; 0x21
    14d8:	3f c0       	rjmp	.+126    	; 0x1558 <main+0x306>
	else if (__tmp > 65535)
    14da:	6b a1       	ldd	r22, Y+35	; 0x23
    14dc:	7c a1       	ldd	r23, Y+36	; 0x24
    14de:	8d a1       	ldd	r24, Y+37	; 0x25
    14e0:	9e a1       	ldd	r25, Y+38	; 0x26
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	3f ef       	ldi	r19, 0xFF	; 255
    14e6:	4f e7       	ldi	r20, 0x7F	; 127
    14e8:	57 e4       	ldi	r21, 0x47	; 71
    14ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ee:	18 16       	cp	r1, r24
    14f0:	4c f5       	brge	.+82     	; 0x1544 <main+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f2:	6f a1       	ldd	r22, Y+39	; 0x27
    14f4:	78 a5       	ldd	r23, Y+40	; 0x28
    14f6:	89 a5       	ldd	r24, Y+41	; 0x29
    14f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	40 e2       	ldi	r20, 0x20	; 32
    1500:	51 e4       	ldi	r21, 0x41	; 65
    1502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	bc 01       	movw	r22, r24
    150c:	cd 01       	movw	r24, r26
    150e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	9a a3       	std	Y+34, r25	; 0x22
    1518:	89 a3       	std	Y+33, r24	; 0x21
    151a:	0f c0       	rjmp	.+30     	; 0x153a <main+0x2e8>
    151c:	88 ec       	ldi	r24, 0xC8	; 200
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	98 a3       	std	Y+32, r25	; 0x20
    1522:	8f 8f       	std	Y+31, r24	; 0x1f
    1524:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1526:	98 a1       	ldd	r25, Y+32	; 0x20
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	f1 f7       	brne	.-4      	; 0x1528 <main+0x2d6>
    152c:	98 a3       	std	Y+32, r25	; 0x20
    152e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1530:	89 a1       	ldd	r24, Y+33	; 0x21
    1532:	9a a1       	ldd	r25, Y+34	; 0x22
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	9a a3       	std	Y+34, r25	; 0x22
    1538:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    153a:	89 a1       	ldd	r24, Y+33	; 0x21
    153c:	9a a1       	ldd	r25, Y+34	; 0x22
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	69 f7       	brne	.-38     	; 0x151c <main+0x2ca>
    1542:	14 c0       	rjmp	.+40     	; 0x156c <main+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1544:	6b a1       	ldd	r22, Y+35	; 0x23
    1546:	7c a1       	ldd	r23, Y+36	; 0x24
    1548:	8d a1       	ldd	r24, Y+37	; 0x25
    154a:	9e a1       	ldd	r25, Y+38	; 0x26
    154c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	9a a3       	std	Y+34, r25	; 0x22
    1556:	89 a3       	std	Y+33, r24	; 0x21
    1558:	89 a1       	ldd	r24, Y+33	; 0x21
    155a:	9a a1       	ldd	r25, Y+34	; 0x22
    155c:	9e 8f       	std	Y+30, r25	; 0x1e
    155e:	8d 8f       	std	Y+29, r24	; 0x1d
    1560:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1562:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	f1 f7       	brne	.-4      	; 0x1564 <main+0x312>
    1568:	9e 8f       	std	Y+30, r25	; 0x1e
    156a:	8d 8f       	std	Y+29, r24	; 0x1d
                _delay_ms(15000);
                show=0;
    156c:	10 92 bf 00 	sts	0x00BF, r1
                k=0;
    1570:	10 92 bb 00 	sts	0x00BB, r1
                key_num3[10]=0;
    1574:	10 92 e2 00 	sts	0x00E2, r1
                confirmed=0;
    1578:	10 92 c0 00 	sts	0x00C0, r1
    157c:	c9 ce       	rjmp	.-622    	; 0x1310 <main+0xbe>
                }*/
               // wrong=1;
            }

         }
      	 else if(KEYPAD_getPressedKey()=='-'){
    157e:	0e 94 34 10 	call	0x2068	; 0x2068 <KEYPAD_getPressedKey>
    1582:	8d 32       	cpi	r24, 0x2D	; 45
    1584:	09 f0       	breq	.+2      	; 0x1588 <main+0x336>
    1586:	c4 ce       	rjmp	.-632    	; 0x1310 <main+0xbe>
      		UART_sendByte(change);
    1588:	80 91 af 00 	lds	r24, 0x00AF
    158c:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <UART_sendByte>
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	aa ef       	ldi	r26, 0xFA	; 250
    1596:	b3 e4       	ldi	r27, 0x43	; 67
    1598:	89 8f       	std	Y+25, r24	; 0x19
    159a:	9a 8f       	std	Y+26, r25	; 0x1a
    159c:	ab 8f       	std	Y+27, r26	; 0x1b
    159e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a0:	69 8d       	ldd	r22, Y+25	; 0x19
    15a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	4a ef       	ldi	r20, 0xFA	; 250
    15ae:	54 e4       	ldi	r21, 0x44	; 68
    15b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	8d 8b       	std	Y+21, r24	; 0x15
    15ba:	9e 8b       	std	Y+22, r25	; 0x16
    15bc:	af 8b       	std	Y+23, r26	; 0x17
    15be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15c0:	6d 89       	ldd	r22, Y+21	; 0x15
    15c2:	7e 89       	ldd	r23, Y+22	; 0x16
    15c4:	8f 89       	ldd	r24, Y+23	; 0x17
    15c6:	98 8d       	ldd	r25, Y+24	; 0x18
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	40 e8       	ldi	r20, 0x80	; 128
    15ce:	5f e3       	ldi	r21, 0x3F	; 63
    15d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15d4:	88 23       	and	r24, r24
    15d6:	2c f4       	brge	.+10     	; 0x15e2 <main+0x390>
		__ticks = 1;
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	9c 8b       	std	Y+20, r25	; 0x14
    15de:	8b 8b       	std	Y+19, r24	; 0x13
    15e0:	3f c0       	rjmp	.+126    	; 0x1660 <main+0x40e>
	else if (__tmp > 65535)
    15e2:	6d 89       	ldd	r22, Y+21	; 0x15
    15e4:	7e 89       	ldd	r23, Y+22	; 0x16
    15e6:	8f 89       	ldd	r24, Y+23	; 0x17
    15e8:	98 8d       	ldd	r25, Y+24	; 0x18
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	3f ef       	ldi	r19, 0xFF	; 255
    15ee:	4f e7       	ldi	r20, 0x7F	; 127
    15f0:	57 e4       	ldi	r21, 0x47	; 71
    15f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15f6:	18 16       	cp	r1, r24
    15f8:	4c f5       	brge	.+82     	; 0x164c <main+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fa:	69 8d       	ldd	r22, Y+25	; 0x19
    15fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1600:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e2       	ldi	r20, 0x20	; 32
    1608:	51 e4       	ldi	r21, 0x41	; 65
    160a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	bc 01       	movw	r22, r24
    1614:	cd 01       	movw	r24, r26
    1616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	9c 8b       	std	Y+20, r25	; 0x14
    1620:	8b 8b       	std	Y+19, r24	; 0x13
    1622:	0f c0       	rjmp	.+30     	; 0x1642 <main+0x3f0>
    1624:	88 ec       	ldi	r24, 0xC8	; 200
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	9a 8b       	std	Y+18, r25	; 0x12
    162a:	89 8b       	std	Y+17, r24	; 0x11
    162c:	89 89       	ldd	r24, Y+17	; 0x11
    162e:	9a 89       	ldd	r25, Y+18	; 0x12
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	f1 f7       	brne	.-4      	; 0x1630 <main+0x3de>
    1634:	9a 8b       	std	Y+18, r25	; 0x12
    1636:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1638:	8b 89       	ldd	r24, Y+19	; 0x13
    163a:	9c 89       	ldd	r25, Y+20	; 0x14
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	9c 8b       	std	Y+20, r25	; 0x14
    1640:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1642:	8b 89       	ldd	r24, Y+19	; 0x13
    1644:	9c 89       	ldd	r25, Y+20	; 0x14
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	69 f7       	brne	.-38     	; 0x1624 <main+0x3d2>
    164a:	14 c0       	rjmp	.+40     	; 0x1674 <main+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    164c:	6d 89       	ldd	r22, Y+21	; 0x15
    164e:	7e 89       	ldd	r23, Y+22	; 0x16
    1650:	8f 89       	ldd	r24, Y+23	; 0x17
    1652:	98 8d       	ldd	r25, Y+24	; 0x18
    1654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	9c 8b       	std	Y+20, r25	; 0x14
    165e:	8b 8b       	std	Y+19, r24	; 0x13
    1660:	8b 89       	ldd	r24, Y+19	; 0x13
    1662:	9c 89       	ldd	r25, Y+20	; 0x14
    1664:	98 8b       	std	Y+16, r25	; 0x10
    1666:	8f 87       	std	Y+15, r24	; 0x0f
    1668:	8f 85       	ldd	r24, Y+15	; 0x0f
    166a:	98 89       	ldd	r25, Y+16	; 0x10
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	f1 f7       	brne	.-4      	; 0x166c <main+0x41a>
    1670:	98 8b       	std	Y+16, r25	; 0x10
    1672:	8f 87       	std	Y+15, r24	; 0x0f
      		_delay_ms(500);
            LCD_clearScreen();
    1674:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_clearScreen>
            LCD_displayString("Enter Password: ");
    1678:	81 e7       	ldi	r24, 0x71	; 113
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <LCD_displayString>
            LCD_moveCursor(1,0);
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	60 e0       	ldi	r22, 0x00	; 0
    1684:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <LCD_moveCursor>
            for(i=0;i<pass1;i++){
    1688:	10 92 b9 00 	sts	0x00B9, r1
    168c:	07 c0       	rjmp	.+14     	; 0x169c <main+0x44a>
            	enter_password();
    168e:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <enter_password>
      		UART_sendByte(change);
      		_delay_ms(500);
            LCD_clearScreen();
            LCD_displayString("Enter Password: ");
            LCD_moveCursor(1,0);
            for(i=0;i<pass1;i++){
    1692:	80 91 b9 00 	lds	r24, 0x00B9
    1696:	8f 5f       	subi	r24, 0xFF	; 255
    1698:	80 93 b9 00 	sts	0x00B9, r24
    169c:	90 91 b9 00 	lds	r25, 0x00B9
    16a0:	80 91 b7 00 	lds	r24, 0x00B7
    16a4:	98 17       	cp	r25, r24
    16a6:	98 f3       	brcs	.-26     	; 0x168e <main+0x43c>
    16a8:	04 c0       	rjmp	.+8      	; 0x16b2 <main+0x460>
            	enter_password();
            }
            while(confirmed==0){
            	confirmed=UART_recieveByte();
    16aa:	0e 94 91 16 	call	0x2d22	; 0x2d22 <UART_recieveByte>
    16ae:	80 93 c0 00 	sts	0x00C0, r24
            LCD_displayString("Enter Password: ");
            LCD_moveCursor(1,0);
            for(i=0;i<pass1;i++){
            	enter_password();
            }
            while(confirmed==0){
    16b2:	80 91 c0 00 	lds	r24, 0x00C0
    16b6:	88 23       	and	r24, r24
    16b8:	c1 f3       	breq	.-16     	; 0x16aa <main+0x458>
            	confirmed=UART_recieveByte();
            }
            if(confirmed==1){
    16ba:	80 91 c0 00 	lds	r24, 0x00C0
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	f9 f4       	brne	.+62     	; 0x1700 <main+0x4ae>
               LCD_clearScreen();
    16c2:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_clearScreen>
               LCD_displayString("Enter Password: ");
    16c6:	81 e7       	ldi	r24, 0x71	; 113
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <LCD_displayString>
               LCD_moveCursor(1,0);
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <LCD_moveCursor>
               key_num[10]=0;
    16d6:	10 92 ce 00 	sts	0x00CE, r1
               key_num2[10]=0;
    16da:	10 92 d8 00 	sts	0x00D8, r1
               pass1=0,pass2=0,flag=0;
    16de:	10 92 b7 00 	sts	0x00B7, r1
    16e2:	10 92 b8 00 	sts	0x00B8, r1
    16e6:	10 92 bc 00 	sts	0x00BC, r1
               created=0;
    16ea:	10 92 bd 00 	sts	0x00BD, r1
               show=0;
    16ee:	10 92 bf 00 	sts	0x00BF, r1
               confirmed=0;
    16f2:	10 92 c0 00 	sts	0x00C0, r1
               key_num3[10]=0;
    16f6:	10 92 e2 00 	sts	0x00E2, r1
               k=0;
    16fa:	10 92 bb 00 	sts	0x00BB, r1
    16fe:	08 ce       	rjmp	.-1008   	; 0x1310 <main+0xbe>
          }
            else if(confirmed==2){
    1700:	80 91 c0 00 	lds	r24, 0x00C0
    1704:	82 30       	cpi	r24, 0x02	; 2
    1706:	09 f0       	breq	.+2      	; 0x170a <main+0x4b8>
    1708:	03 ce       	rjmp	.-1018   	; 0x1310 <main+0xbe>
            	LCD_clearScreen();
    170a:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_clearScreen>
            	LCD_displayString("wrong ");
    170e:	80 ea       	ldi	r24, 0xA0	; 160
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <LCD_displayString>
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	90 e6       	ldi	r25, 0x60	; 96
    171a:	aa e6       	ldi	r26, 0x6A	; 106
    171c:	b6 e4       	ldi	r27, 0x46	; 70
    171e:	8b 87       	std	Y+11, r24	; 0x0b
    1720:	9c 87       	std	Y+12, r25	; 0x0c
    1722:	ad 87       	std	Y+13, r26	; 0x0d
    1724:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1726:	6b 85       	ldd	r22, Y+11	; 0x0b
    1728:	7c 85       	ldd	r23, Y+12	; 0x0c
    172a:	8d 85       	ldd	r24, Y+13	; 0x0d
    172c:	9e 85       	ldd	r25, Y+14	; 0x0e
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	4a ef       	ldi	r20, 0xFA	; 250
    1734:	54 e4       	ldi	r21, 0x44	; 68
    1736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	8f 83       	std	Y+7, r24	; 0x07
    1740:	98 87       	std	Y+8, r25	; 0x08
    1742:	a9 87       	std	Y+9, r26	; 0x09
    1744:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1746:	6f 81       	ldd	r22, Y+7	; 0x07
    1748:	78 85       	ldd	r23, Y+8	; 0x08
    174a:	89 85       	ldd	r24, Y+9	; 0x09
    174c:	9a 85       	ldd	r25, Y+10	; 0x0a
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e8       	ldi	r20, 0x80	; 128
    1754:	5f e3       	ldi	r21, 0x3F	; 63
    1756:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    175a:	88 23       	and	r24, r24
    175c:	2c f4       	brge	.+10     	; 0x1768 <main+0x516>
		__ticks = 1;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	9e 83       	std	Y+6, r25	; 0x06
    1764:	8d 83       	std	Y+5, r24	; 0x05
    1766:	3f c0       	rjmp	.+126    	; 0x17e6 <main+0x594>
	else if (__tmp > 65535)
    1768:	6f 81       	ldd	r22, Y+7	; 0x07
    176a:	78 85       	ldd	r23, Y+8	; 0x08
    176c:	89 85       	ldd	r24, Y+9	; 0x09
    176e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	3f ef       	ldi	r19, 0xFF	; 255
    1774:	4f e7       	ldi	r20, 0x7F	; 127
    1776:	57 e4       	ldi	r21, 0x47	; 71
    1778:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    177c:	18 16       	cp	r1, r24
    177e:	4c f5       	brge	.+82     	; 0x17d2 <main+0x580>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1780:	6b 85       	ldd	r22, Y+11	; 0x0b
    1782:	7c 85       	ldd	r23, Y+12	; 0x0c
    1784:	8d 85       	ldd	r24, Y+13	; 0x0d
    1786:	9e 85       	ldd	r25, Y+14	; 0x0e
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	40 e2       	ldi	r20, 0x20	; 32
    178e:	51 e4       	ldi	r21, 0x41	; 65
    1790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	bc 01       	movw	r22, r24
    179a:	cd 01       	movw	r24, r26
    179c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	9e 83       	std	Y+6, r25	; 0x06
    17a6:	8d 83       	std	Y+5, r24	; 0x05
    17a8:	0f c0       	rjmp	.+30     	; 0x17c8 <main+0x576>
    17aa:	88 ec       	ldi	r24, 0xC8	; 200
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	9c 83       	std	Y+4, r25	; 0x04
    17b0:	8b 83       	std	Y+3, r24	; 0x03
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	9c 81       	ldd	r25, Y+4	; 0x04
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <main+0x564>
    17ba:	9c 83       	std	Y+4, r25	; 0x04
    17bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17be:	8d 81       	ldd	r24, Y+5	; 0x05
    17c0:	9e 81       	ldd	r25, Y+6	; 0x06
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	9e 83       	std	Y+6, r25	; 0x06
    17c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ca:	9e 81       	ldd	r25, Y+6	; 0x06
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	69 f7       	brne	.-38     	; 0x17aa <main+0x558>
    17d0:	14 c0       	rjmp	.+40     	; 0x17fa <main+0x5a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d2:	6f 81       	ldd	r22, Y+7	; 0x07
    17d4:	78 85       	ldd	r23, Y+8	; 0x08
    17d6:	89 85       	ldd	r24, Y+9	; 0x09
    17d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	9e 83       	std	Y+6, r25	; 0x06
    17e4:	8d 83       	std	Y+5, r24	; 0x05
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ea:	9a 83       	std	Y+2, r25	; 0x02
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	9a 81       	ldd	r25, Y+2	; 0x02
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	f1 f7       	brne	.-4      	; 0x17f2 <main+0x5a0>
    17f6:	9a 83       	std	Y+2, r25	; 0x02
    17f8:	89 83       	std	Y+1, r24	; 0x01
    		    //Timer0_Init(&Timer0_Config,0);
    		   /* while(g_counter!=sec15){};
    		    g_counter=0;
    		    Timer0_DeInit();
    		    LCD_clearScreen();*/
    		    show=0;
    17fa:	10 92 bf 00 	sts	0x00BF, r1
    		    k=0;
    17fe:	10 92 bb 00 	sts	0x00BB, r1
    		    key_num3[10]=0;
    1802:	10 92 e2 00 	sts	0x00E2, r1
    		    confirmed=0;
    1806:	10 92 c0 00 	sts	0x00C0, r1
    180a:	82 cd       	rjmp	.-1276   	; 0x1310 <main+0xbe>

0000180c <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    180c:	1f 92       	push	r1
    180e:	0f 92       	push	r0
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	0f 92       	push	r0
    1814:	11 24       	eor	r1, r1
    1816:	2f 93       	push	r18
    1818:	3f 93       	push	r19
    181a:	4f 93       	push	r20
    181c:	5f 93       	push	r21
    181e:	6f 93       	push	r22
    1820:	7f 93       	push	r23
    1822:	8f 93       	push	r24
    1824:	9f 93       	push	r25
    1826:	af 93       	push	r26
    1828:	bf 93       	push	r27
    182a:	ef 93       	push	r30
    182c:	ff 93       	push	r31
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1836:	80 91 c2 00 	lds	r24, 0x00C2
    183a:	90 91 c3 00 	lds	r25, 0x00C3
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	29 f0       	breq	.+10     	; 0x184c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1842:	e0 91 c2 00 	lds	r30, 0x00C2
    1846:	f0 91 c3 00 	lds	r31, 0x00C3
    184a:	09 95       	icall
	}
}
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	ff 91       	pop	r31
    1852:	ef 91       	pop	r30
    1854:	bf 91       	pop	r27
    1856:	af 91       	pop	r26
    1858:	9f 91       	pop	r25
    185a:	8f 91       	pop	r24
    185c:	7f 91       	pop	r23
    185e:	6f 91       	pop	r22
    1860:	5f 91       	pop	r21
    1862:	4f 91       	pop	r20
    1864:	3f 91       	pop	r19
    1866:	2f 91       	pop	r18
    1868:	0f 90       	pop	r0
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	0f 90       	pop	r0
    186e:	1f 90       	pop	r1
    1870:	18 95       	reti

00001872 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    1872:	1f 92       	push	r1
    1874:	0f 92       	push	r0
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	0f 92       	push	r0
    187a:	11 24       	eor	r1, r1
    187c:	2f 93       	push	r18
    187e:	3f 93       	push	r19
    1880:	4f 93       	push	r20
    1882:	5f 93       	push	r21
    1884:	6f 93       	push	r22
    1886:	7f 93       	push	r23
    1888:	8f 93       	push	r24
    188a:	9f 93       	push	r25
    188c:	af 93       	push	r26
    188e:	bf 93       	push	r27
    1890:	ef 93       	push	r30
    1892:	ff 93       	push	r31
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    189c:	80 91 c2 00 	lds	r24, 0x00C2
    18a0:	90 91 c3 00 	lds	r25, 0x00C3
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	29 f0       	breq	.+10     	; 0x18b2 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    18a8:	e0 91 c2 00 	lds	r30, 0x00C2
    18ac:	f0 91 c3 00 	lds	r31, 0x00C3
    18b0:	09 95       	icall
	}
}
    18b2:	cf 91       	pop	r28
    18b4:	df 91       	pop	r29
    18b6:	ff 91       	pop	r31
    18b8:	ef 91       	pop	r30
    18ba:	bf 91       	pop	r27
    18bc:	af 91       	pop	r26
    18be:	9f 91       	pop	r25
    18c0:	8f 91       	pop	r24
    18c2:	7f 91       	pop	r23
    18c4:	6f 91       	pop	r22
    18c6:	5f 91       	pop	r21
    18c8:	4f 91       	pop	r20
    18ca:	3f 91       	pop	r19
    18cc:	2f 91       	pop	r18
    18ce:	0f 90       	pop	r0
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	0f 90       	pop	r0
    18d4:	1f 90       	pop	r1
    18d6:	18 95       	reti

000018d8 <Timer0_Init>:
 * 1. Set the required clock.
 * 2. put initial timer counter=0.
 * 3. Set the required type.
 * 4. configure rest of the registers depends on the type.
 */
void Timer0_Init(const Timer0_ConfigType * Config_Ptr,unsigned char tick){
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	00 d0       	rcall	.+0      	; 0x18de <Timer0_Init+0x6>
    18de:	0f 92       	push	r0
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	9a 83       	std	Y+2, r25	; 0x02
    18e6:	89 83       	std	Y+1, r24	; 0x01
    18e8:	6b 83       	std	Y+3, r22	; 0x03
	if(Config_Ptr->type==Normal){
    18ea:	e9 81       	ldd	r30, Y+1	; 0x01
    18ec:	fa 81       	ldd	r31, Y+2	; 0x02
    18ee:	81 81       	ldd	r24, Z+1	; 0x01
    18f0:	88 23       	and	r24, r24
    18f2:	f9 f4       	brne	.+62     	; 0x1932 <Timer0_Init+0x5a>
		TCNT0 = 0; //Set Timer initial value to 0
    18f4:	e2 e5       	ldi	r30, 0x52	; 82
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	10 82       	st	Z, r1
		TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    18fa:	a9 e5       	ldi	r26, 0x59	; 89
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e9 e5       	ldi	r30, 0x59	; 89
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	81 60       	ori	r24, 0x01	; 1
    1906:	8c 93       	st	X, r24
		/*
			 * insert the required clock value in the first three bits (CS00, CS01 and CS02)
			 * of TCCR0 Register
	    */
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->clock);
    1908:	a3 e5       	ldi	r26, 0x53	; 83
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e3 e5       	ldi	r30, 0x53	; 83
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	98 2f       	mov	r25, r24
    1914:	98 7f       	andi	r25, 0xF8	; 248
    1916:	e9 81       	ldd	r30, Y+1	; 0x01
    1918:	fa 81       	ldd	r31, Y+2	; 0x02
    191a:	80 81       	ld	r24, Z
    191c:	89 2b       	or	r24, r25
    191e:	8c 93       	st	X, r24
			* 1. Non PWM mode FOC0=1
			* 2. Normal Mode WGM01=0 & WGM00=0
			* 3. Normal Mode COM00=0 & COM01=0
			* 4. Configure clock
	    */
		TCCR0 = (TCCR0 & 0xBF) | (1<<FOC0);
    1920:	a3 e5       	ldi	r26, 0x53	; 83
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e3 e5       	ldi	r30, 0x53	; 83
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	8f 73       	andi	r24, 0x3F	; 63
    192c:	80 68       	ori	r24, 0x80	; 128
    192e:	8c 93       	st	X, r24
    1930:	27 c0       	rjmp	.+78     	; 0x1980 <Timer0_Init+0xa8>
	}
	else if(Config_Ptr->type==CTC){
    1932:	e9 81       	ldd	r30, Y+1	; 0x01
    1934:	fa 81       	ldd	r31, Y+2	; 0x02
    1936:	81 81       	ldd	r24, Z+1	; 0x01
    1938:	81 30       	cpi	r24, 0x01	; 1
    193a:	11 f5       	brne	.+68     	; 0x1980 <Timer0_Init+0xa8>
		TCNT0 = 0; //Set Timer initial value to 0
    193c:	e2 e5       	ldi	r30, 0x52	; 82
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	10 82       	st	Z, r1
		OCR0  = tick; // Set Compare Value
    1942:	ec e5       	ldi	r30, 0x5C	; 92
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	80 83       	st	Z, r24
		TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    194a:	a9 e5       	ldi	r26, 0x59	; 89
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e9 e5       	ldi	r30, 0x59	; 89
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	82 60       	ori	r24, 0x02	; 2
    1956:	8c 93       	st	X, r24
		/*
			* insert the required clock value in the first three bits (CS00, CS01 and CS02)
			* of TCCR0 Register
	    */
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->clock);
    1958:	a3 e5       	ldi	r26, 0x53	; 83
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e3 e5       	ldi	r30, 0x53	; 83
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	98 2f       	mov	r25, r24
    1964:	98 7f       	andi	r25, 0xF8	; 248
    1966:	e9 81       	ldd	r30, Y+1	; 0x01
    1968:	fa 81       	ldd	r31, Y+2	; 0x02
    196a:	80 81       	ld	r24, Z
    196c:	89 2b       	or	r24, r25
    196e:	8c 93       	st	X, r24
			* 1. Non PWM mode FOC0=1
			* 2. CTC Mode WGM01=1 & WGM00=0
			* 3. COM00=0 & COM01=0
			* 4. Configure clock
	    */
		TCCR0 = (TCCR0 & 0xBF) | (1<<FOC0) | (1<<WGM01);
    1970:	a3 e5       	ldi	r26, 0x53	; 83
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e3 e5       	ldi	r30, 0x53	; 83
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	87 73       	andi	r24, 0x37	; 55
    197c:	88 68       	ori	r24, 0x88	; 136
    197e:	8c 93       	st	X, r24
	}
}
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <Timer0_DeInit>:
/*
 * Description:
 * stop the timer
 */
void Timer0_DeInit(void)
{
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
	/*clear all the timer registers*/
	TCCR0=0;
    1994:	e3 e5       	ldi	r30, 0x53	; 83
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	10 82       	st	Z, r1
	TCNT0=0;
    199a:	e2 e5       	ldi	r30, 0x52	; 82
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	10 82       	st	Z, r1
	OCR0=0;
    19a0:	ec e5       	ldi	r30, 0x5C	; 92
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	10 82       	st	Z, r1
    /*Disable the interrupts*/
	CLEAR_BIT(TIMSK,OCIE0);
    19a6:	a9 e5       	ldi	r26, 0x59	; 89
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e9 e5       	ldi	r30, 0x59	; 89
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	8d 7f       	andi	r24, 0xFD	; 253
    19b2:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE0);
    19b4:	a9 e5       	ldi	r26, 0x59	; 89
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e9 e5       	ldi	r30, 0x59	; 89
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	8e 7f       	andi	r24, 0xFE	; 254
    19c0:	8c 93       	st	X, r24
}
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <Timer0_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void Timer0_setCallBack(void(*a_ptr)(void))
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <Timer0_setCallBack+0x6>
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	9a 83       	std	Y+2, r25	; 0x02
    19d4:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	9a 81       	ldd	r25, Y+2	; 0x02
    19da:	90 93 c3 00 	sts	0x00C3, r25
    19de:	80 93 c2 00 	sts	0x00C2, r24
}
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <GPIO_setupPinDirection+0x6>
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <GPIO_setupPinDirection+0x8>
    19f4:	0f 92       	push	r0
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	89 83       	std	Y+1, r24	; 0x01
    19fc:	6a 83       	std	Y+2, r22	; 0x02
    19fe:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	88 30       	cpi	r24, 0x08	; 8
    1a04:	08 f0       	brcs	.+2      	; 0x1a08 <GPIO_setupPinDirection+0x1c>
    1a06:	d5 c0       	rjmp	.+426    	; 0x1bb2 <GPIO_setupPinDirection+0x1c6>
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	84 30       	cpi	r24, 0x04	; 4
    1a0c:	08 f0       	brcs	.+2      	; 0x1a10 <GPIO_setupPinDirection+0x24>
    1a0e:	d1 c0       	rjmp	.+418    	; 0x1bb2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	3d 83       	std	Y+5, r19	; 0x05
    1a18:	2c 83       	std	Y+4, r18	; 0x04
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	91 05       	cpc	r25, r1
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <GPIO_setupPinDirection+0x3a>
    1a24:	43 c0       	rjmp	.+134    	; 0x1aac <GPIO_setupPinDirection+0xc0>
    1a26:	2c 81       	ldd	r18, Y+4	; 0x04
    1a28:	3d 81       	ldd	r19, Y+5	; 0x05
    1a2a:	22 30       	cpi	r18, 0x02	; 2
    1a2c:	31 05       	cpc	r19, r1
    1a2e:	2c f4       	brge	.+10     	; 0x1a3a <GPIO_setupPinDirection+0x4e>
    1a30:	8c 81       	ldd	r24, Y+4	; 0x04
    1a32:	9d 81       	ldd	r25, Y+5	; 0x05
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	71 f0       	breq	.+28     	; 0x1a54 <GPIO_setupPinDirection+0x68>
    1a38:	bc c0       	rjmp	.+376    	; 0x1bb2 <GPIO_setupPinDirection+0x1c6>
    1a3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a3e:	22 30       	cpi	r18, 0x02	; 2
    1a40:	31 05       	cpc	r19, r1
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <GPIO_setupPinDirection+0x5a>
    1a44:	5f c0       	rjmp	.+190    	; 0x1b04 <GPIO_setupPinDirection+0x118>
    1a46:	8c 81       	ldd	r24, Y+4	; 0x04
    1a48:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4a:	83 30       	cpi	r24, 0x03	; 3
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <GPIO_setupPinDirection+0x66>
    1a50:	85 c0       	rjmp	.+266    	; 0x1b5c <GPIO_setupPinDirection+0x170>
    1a52:	af c0       	rjmp	.+350    	; 0x1bb2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	81 30       	cpi	r24, 0x01	; 1
    1a58:	a1 f4       	brne	.+40     	; 0x1a82 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1a5a:	aa e3       	ldi	r26, 0x3A	; 58
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	ea e3       	ldi	r30, 0x3A	; 58
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	48 2f       	mov	r20, r24
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	02 2e       	mov	r0, r18
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <GPIO_setupPinDirection+0x8c>
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	0a 94       	dec	r0
    1a7a:	e2 f7       	brpl	.-8      	; 0x1a74 <GPIO_setupPinDirection+0x88>
    1a7c:	84 2b       	or	r24, r20
    1a7e:	8c 93       	st	X, r24
    1a80:	98 c0       	rjmp	.+304    	; 0x1bb2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1a82:	aa e3       	ldi	r26, 0x3A	; 58
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	ea e3       	ldi	r30, 0x3A	; 58
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	48 2f       	mov	r20, r24
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	02 2e       	mov	r0, r18
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <GPIO_setupPinDirection+0xb4>
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	0a 94       	dec	r0
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <GPIO_setupPinDirection+0xb0>
    1aa4:	80 95       	com	r24
    1aa6:	84 23       	and	r24, r20
    1aa8:	8c 93       	st	X, r24
    1aaa:	83 c0       	rjmp	.+262    	; 0x1bb2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	81 30       	cpi	r24, 0x01	; 1
    1ab0:	a1 f4       	brne	.+40     	; 0x1ada <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1ab2:	a7 e3       	ldi	r26, 0x37	; 55
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e7 e3       	ldi	r30, 0x37	; 55
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	48 2f       	mov	r20, r24
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	02 2e       	mov	r0, r18
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <GPIO_setupPinDirection+0xe4>
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	0a 94       	dec	r0
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <GPIO_setupPinDirection+0xe0>
    1ad4:	84 2b       	or	r24, r20
    1ad6:	8c 93       	st	X, r24
    1ad8:	6c c0       	rjmp	.+216    	; 0x1bb2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1ada:	a7 e3       	ldi	r26, 0x37	; 55
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e7 e3       	ldi	r30, 0x37	; 55
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	48 2f       	mov	r20, r24
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	02 2e       	mov	r0, r18
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <GPIO_setupPinDirection+0x10c>
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	0a 94       	dec	r0
    1afa:	e2 f7       	brpl	.-8      	; 0x1af4 <GPIO_setupPinDirection+0x108>
    1afc:	80 95       	com	r24
    1afe:	84 23       	and	r24, r20
    1b00:	8c 93       	st	X, r24
    1b02:	57 c0       	rjmp	.+174    	; 0x1bb2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	81 30       	cpi	r24, 0x01	; 1
    1b08:	a1 f4       	brne	.+40     	; 0x1b32 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1b0a:	a4 e3       	ldi	r26, 0x34	; 52
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e4 e3       	ldi	r30, 0x34	; 52
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	48 2f       	mov	r20, r24
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	02 2e       	mov	r0, r18
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <GPIO_setupPinDirection+0x13c>
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	0a 94       	dec	r0
    1b2a:	e2 f7       	brpl	.-8      	; 0x1b24 <GPIO_setupPinDirection+0x138>
    1b2c:	84 2b       	or	r24, r20
    1b2e:	8c 93       	st	X, r24
    1b30:	40 c0       	rjmp	.+128    	; 0x1bb2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1b32:	a4 e3       	ldi	r26, 0x34	; 52
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e4 e3       	ldi	r30, 0x34	; 52
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	48 2f       	mov	r20, r24
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	02 2e       	mov	r0, r18
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <GPIO_setupPinDirection+0x164>
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	0a 94       	dec	r0
    1b52:	e2 f7       	brpl	.-8      	; 0x1b4c <GPIO_setupPinDirection+0x160>
    1b54:	80 95       	com	r24
    1b56:	84 23       	and	r24, r20
    1b58:	8c 93       	st	X, r24
    1b5a:	2b c0       	rjmp	.+86     	; 0x1bb2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	81 30       	cpi	r24, 0x01	; 1
    1b60:	a1 f4       	brne	.+40     	; 0x1b8a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1b62:	a1 e3       	ldi	r26, 0x31	; 49
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e1 e3       	ldi	r30, 0x31	; 49
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	48 2f       	mov	r20, r24
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	02 2e       	mov	r0, r18
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <GPIO_setupPinDirection+0x194>
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	0a 94       	dec	r0
    1b82:	e2 f7       	brpl	.-8      	; 0x1b7c <GPIO_setupPinDirection+0x190>
    1b84:	84 2b       	or	r24, r20
    1b86:	8c 93       	st	X, r24
    1b88:	14 c0       	rjmp	.+40     	; 0x1bb2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1b8a:	a1 e3       	ldi	r26, 0x31	; 49
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e1 e3       	ldi	r30, 0x31	; 49
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	48 2f       	mov	r20, r24
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	02 2e       	mov	r0, r18
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <GPIO_setupPinDirection+0x1bc>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	0a 94       	dec	r0
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <GPIO_setupPinDirection+0x1b8>
    1bac:	80 95       	com	r24
    1bae:	84 23       	and	r24, r20
    1bb0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	08 95       	ret

00001bc2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <GPIO_writePin+0x6>
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <GPIO_writePin+0x8>
    1bca:	0f 92       	push	r0
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	89 83       	std	Y+1, r24	; 0x01
    1bd2:	6a 83       	std	Y+2, r22	; 0x02
    1bd4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	88 30       	cpi	r24, 0x08	; 8
    1bda:	08 f0       	brcs	.+2      	; 0x1bde <GPIO_writePin+0x1c>
    1bdc:	d5 c0       	rjmp	.+426    	; 0x1d88 <GPIO_writePin+0x1c6>
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	84 30       	cpi	r24, 0x04	; 4
    1be2:	08 f0       	brcs	.+2      	; 0x1be6 <GPIO_writePin+0x24>
    1be4:	d1 c0       	rjmp	.+418    	; 0x1d88 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	3d 83       	std	Y+5, r19	; 0x05
    1bee:	2c 83       	std	Y+4, r18	; 0x04
    1bf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf4:	81 30       	cpi	r24, 0x01	; 1
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <GPIO_writePin+0x3a>
    1bfa:	43 c0       	rjmp	.+134    	; 0x1c82 <GPIO_writePin+0xc0>
    1bfc:	2c 81       	ldd	r18, Y+4	; 0x04
    1bfe:	3d 81       	ldd	r19, Y+5	; 0x05
    1c00:	22 30       	cpi	r18, 0x02	; 2
    1c02:	31 05       	cpc	r19, r1
    1c04:	2c f4       	brge	.+10     	; 0x1c10 <GPIO_writePin+0x4e>
    1c06:	8c 81       	ldd	r24, Y+4	; 0x04
    1c08:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	71 f0       	breq	.+28     	; 0x1c2a <GPIO_writePin+0x68>
    1c0e:	bc c0       	rjmp	.+376    	; 0x1d88 <GPIO_writePin+0x1c6>
    1c10:	2c 81       	ldd	r18, Y+4	; 0x04
    1c12:	3d 81       	ldd	r19, Y+5	; 0x05
    1c14:	22 30       	cpi	r18, 0x02	; 2
    1c16:	31 05       	cpc	r19, r1
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <GPIO_writePin+0x5a>
    1c1a:	5f c0       	rjmp	.+190    	; 0x1cda <GPIO_writePin+0x118>
    1c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c20:	83 30       	cpi	r24, 0x03	; 3
    1c22:	91 05       	cpc	r25, r1
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <GPIO_writePin+0x66>
    1c26:	85 c0       	rjmp	.+266    	; 0x1d32 <GPIO_writePin+0x170>
    1c28:	af c0       	rjmp	.+350    	; 0x1d88 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	a1 f4       	brne	.+40     	; 0x1c58 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1c30:	ab e3       	ldi	r26, 0x3B	; 59
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	eb e3       	ldi	r30, 0x3B	; 59
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	48 2f       	mov	r20, r24
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	02 2e       	mov	r0, r18
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <GPIO_writePin+0x8c>
    1c4a:	88 0f       	add	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	0a 94       	dec	r0
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <GPIO_writePin+0x88>
    1c52:	84 2b       	or	r24, r20
    1c54:	8c 93       	st	X, r24
    1c56:	98 c0       	rjmp	.+304    	; 0x1d88 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1c58:	ab e3       	ldi	r26, 0x3B	; 59
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	eb e3       	ldi	r30, 0x3B	; 59
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	48 2f       	mov	r20, r24
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	02 2e       	mov	r0, r18
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <GPIO_writePin+0xb4>
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	0a 94       	dec	r0
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <GPIO_writePin+0xb0>
    1c7a:	80 95       	com	r24
    1c7c:	84 23       	and	r24, r20
    1c7e:	8c 93       	st	X, r24
    1c80:	83 c0       	rjmp	.+262    	; 0x1d88 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	a1 f4       	brne	.+40     	; 0x1cb0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1c88:	a8 e3       	ldi	r26, 0x38	; 56
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e8 e3       	ldi	r30, 0x38	; 56
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	48 2f       	mov	r20, r24
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	02 2e       	mov	r0, r18
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <GPIO_writePin+0xe4>
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	0a 94       	dec	r0
    1ca8:	e2 f7       	brpl	.-8      	; 0x1ca2 <GPIO_writePin+0xe0>
    1caa:	84 2b       	or	r24, r20
    1cac:	8c 93       	st	X, r24
    1cae:	6c c0       	rjmp	.+216    	; 0x1d88 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1cb0:	a8 e3       	ldi	r26, 0x38	; 56
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e8 e3       	ldi	r30, 0x38	; 56
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	48 2f       	mov	r20, r24
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	02 2e       	mov	r0, r18
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <GPIO_writePin+0x10c>
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	0a 94       	dec	r0
    1cd0:	e2 f7       	brpl	.-8      	; 0x1cca <GPIO_writePin+0x108>
    1cd2:	80 95       	com	r24
    1cd4:	84 23       	and	r24, r20
    1cd6:	8c 93       	st	X, r24
    1cd8:	57 c0       	rjmp	.+174    	; 0x1d88 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	81 30       	cpi	r24, 0x01	; 1
    1cde:	a1 f4       	brne	.+40     	; 0x1d08 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1ce0:	a5 e3       	ldi	r26, 0x35	; 53
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e5 e3       	ldi	r30, 0x35	; 53
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	48 2f       	mov	r20, r24
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	02 2e       	mov	r0, r18
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <GPIO_writePin+0x13c>
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	0a 94       	dec	r0
    1d00:	e2 f7       	brpl	.-8      	; 0x1cfa <GPIO_writePin+0x138>
    1d02:	84 2b       	or	r24, r20
    1d04:	8c 93       	st	X, r24
    1d06:	40 c0       	rjmp	.+128    	; 0x1d88 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1d08:	a5 e3       	ldi	r26, 0x35	; 53
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e5 e3       	ldi	r30, 0x35	; 53
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	48 2f       	mov	r20, r24
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	02 2e       	mov	r0, r18
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <GPIO_writePin+0x164>
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	0a 94       	dec	r0
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <GPIO_writePin+0x160>
    1d2a:	80 95       	com	r24
    1d2c:	84 23       	and	r24, r20
    1d2e:	8c 93       	st	X, r24
    1d30:	2b c0       	rjmp	.+86     	; 0x1d88 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	81 30       	cpi	r24, 0x01	; 1
    1d36:	a1 f4       	brne	.+40     	; 0x1d60 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1d38:	a2 e3       	ldi	r26, 0x32	; 50
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e2 e3       	ldi	r30, 0x32	; 50
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	48 2f       	mov	r20, r24
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	28 2f       	mov	r18, r24
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	02 2e       	mov	r0, r18
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <GPIO_writePin+0x194>
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	0a 94       	dec	r0
    1d58:	e2 f7       	brpl	.-8      	; 0x1d52 <GPIO_writePin+0x190>
    1d5a:	84 2b       	or	r24, r20
    1d5c:	8c 93       	st	X, r24
    1d5e:	14 c0       	rjmp	.+40     	; 0x1d88 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1d60:	a2 e3       	ldi	r26, 0x32	; 50
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e2 e3       	ldi	r30, 0x32	; 50
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	48 2f       	mov	r20, r24
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	02 2e       	mov	r0, r18
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <GPIO_writePin+0x1bc>
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	0a 94       	dec	r0
    1d80:	e2 f7       	brpl	.-8      	; 0x1d7a <GPIO_writePin+0x1b8>
    1d82:	80 95       	com	r24
    1d84:	84 23       	and	r24, r20
    1d86:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	08 95       	ret

00001d98 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1d98:	df 93       	push	r29
    1d9a:	cf 93       	push	r28
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <GPIO_readPin+0x6>
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <GPIO_readPin+0x8>
    1da0:	0f 92       	push	r0
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	8a 83       	std	Y+2, r24	; 0x02
    1da8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1daa:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	88 30       	cpi	r24, 0x08	; 8
    1db0:	08 f0       	brcs	.+2      	; 0x1db4 <GPIO_readPin+0x1c>
    1db2:	84 c0       	rjmp	.+264    	; 0x1ebc <GPIO_readPin+0x124>
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	84 30       	cpi	r24, 0x04	; 4
    1db8:	08 f0       	brcs	.+2      	; 0x1dbc <GPIO_readPin+0x24>
    1dba:	80 c0       	rjmp	.+256    	; 0x1ebc <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	3d 83       	std	Y+5, r19	; 0x05
    1dc4:	2c 83       	std	Y+4, r18	; 0x04
    1dc6:	4c 81       	ldd	r20, Y+4	; 0x04
    1dc8:	5d 81       	ldd	r21, Y+5	; 0x05
    1dca:	41 30       	cpi	r20, 0x01	; 1
    1dcc:	51 05       	cpc	r21, r1
    1dce:	79 f1       	breq	.+94     	; 0x1e2e <GPIO_readPin+0x96>
    1dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd4:	82 30       	cpi	r24, 0x02	; 2
    1dd6:	91 05       	cpc	r25, r1
    1dd8:	34 f4       	brge	.+12     	; 0x1de6 <GPIO_readPin+0x4e>
    1dda:	2c 81       	ldd	r18, Y+4	; 0x04
    1ddc:	3d 81       	ldd	r19, Y+5	; 0x05
    1dde:	21 15       	cp	r18, r1
    1de0:	31 05       	cpc	r19, r1
    1de2:	69 f0       	breq	.+26     	; 0x1dfe <GPIO_readPin+0x66>
    1de4:	6b c0       	rjmp	.+214    	; 0x1ebc <GPIO_readPin+0x124>
    1de6:	4c 81       	ldd	r20, Y+4	; 0x04
    1de8:	5d 81       	ldd	r21, Y+5	; 0x05
    1dea:	42 30       	cpi	r20, 0x02	; 2
    1dec:	51 05       	cpc	r21, r1
    1dee:	b9 f1       	breq	.+110    	; 0x1e5e <GPIO_readPin+0xc6>
    1df0:	8c 81       	ldd	r24, Y+4	; 0x04
    1df2:	9d 81       	ldd	r25, Y+5	; 0x05
    1df4:	83 30       	cpi	r24, 0x03	; 3
    1df6:	91 05       	cpc	r25, r1
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <GPIO_readPin+0x64>
    1dfa:	49 c0       	rjmp	.+146    	; 0x1e8e <GPIO_readPin+0xf6>
    1dfc:	5f c0       	rjmp	.+190    	; 0x1ebc <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1dfe:	e9 e3       	ldi	r30, 0x39	; 57
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	88 2f       	mov	r24, r24
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	a9 01       	movw	r20, r18
    1e10:	02 c0       	rjmp	.+4      	; 0x1e16 <GPIO_readPin+0x7e>
    1e12:	55 95       	asr	r21
    1e14:	47 95       	ror	r20
    1e16:	8a 95       	dec	r24
    1e18:	e2 f7       	brpl	.-8      	; 0x1e12 <GPIO_readPin+0x7a>
    1e1a:	ca 01       	movw	r24, r20
    1e1c:	81 70       	andi	r24, 0x01	; 1
    1e1e:	90 70       	andi	r25, 0x00	; 0
    1e20:	88 23       	and	r24, r24
    1e22:	19 f0       	breq	.+6      	; 0x1e2a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	49 c0       	rjmp	.+146    	; 0x1ebc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e2a:	19 82       	std	Y+1, r1	; 0x01
    1e2c:	47 c0       	rjmp	.+142    	; 0x1ebc <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1e2e:	e6 e3       	ldi	r30, 0x36	; 54
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	88 2f       	mov	r24, r24
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	a9 01       	movw	r20, r18
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <GPIO_readPin+0xae>
    1e42:	55 95       	asr	r21
    1e44:	47 95       	ror	r20
    1e46:	8a 95       	dec	r24
    1e48:	e2 f7       	brpl	.-8      	; 0x1e42 <GPIO_readPin+0xaa>
    1e4a:	ca 01       	movw	r24, r20
    1e4c:	81 70       	andi	r24, 0x01	; 1
    1e4e:	90 70       	andi	r25, 0x00	; 0
    1e50:	88 23       	and	r24, r24
    1e52:	19 f0       	breq	.+6      	; 0x1e5a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	89 83       	std	Y+1, r24	; 0x01
    1e58:	31 c0       	rjmp	.+98     	; 0x1ebc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e5a:	19 82       	std	Y+1, r1	; 0x01
    1e5c:	2f c0       	rjmp	.+94     	; 0x1ebc <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1e5e:	e3 e3       	ldi	r30, 0x33	; 51
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	88 2f       	mov	r24, r24
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	a9 01       	movw	r20, r18
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <GPIO_readPin+0xde>
    1e72:	55 95       	asr	r21
    1e74:	47 95       	ror	r20
    1e76:	8a 95       	dec	r24
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <GPIO_readPin+0xda>
    1e7a:	ca 01       	movw	r24, r20
    1e7c:	81 70       	andi	r24, 0x01	; 1
    1e7e:	90 70       	andi	r25, 0x00	; 0
    1e80:	88 23       	and	r24, r24
    1e82:	19 f0       	breq	.+6      	; 0x1e8a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	89 83       	std	Y+1, r24	; 0x01
    1e88:	19 c0       	rjmp	.+50     	; 0x1ebc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e8a:	19 82       	std	Y+1, r1	; 0x01
    1e8c:	17 c0       	rjmp	.+46     	; 0x1ebc <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1e8e:	e0 e3       	ldi	r30, 0x30	; 48
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	88 2f       	mov	r24, r24
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	a9 01       	movw	r20, r18
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <GPIO_readPin+0x10e>
    1ea2:	55 95       	asr	r21
    1ea4:	47 95       	ror	r20
    1ea6:	8a 95       	dec	r24
    1ea8:	e2 f7       	brpl	.-8      	; 0x1ea2 <GPIO_readPin+0x10a>
    1eaa:	ca 01       	movw	r24, r20
    1eac:	81 70       	andi	r24, 0x01	; 1
    1eae:	90 70       	andi	r25, 0x00	; 0
    1eb0:	88 23       	and	r24, r24
    1eb2:	19 f0       	breq	.+6      	; 0x1eba <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	89 83       	std	Y+1, r24	; 0x01
    1eb8:	01 c0       	rjmp	.+2      	; 0x1ebc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1eba:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	00 d0       	rcall	.+0      	; 0x1ed4 <GPIO_setupPortDirection+0x6>
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <GPIO_setupPortDirection+0x8>
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	89 83       	std	Y+1, r24	; 0x01
    1edc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	84 30       	cpi	r24, 0x04	; 4
    1ee2:	90 f5       	brcc	.+100    	; 0x1f48 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	3c 83       	std	Y+4, r19	; 0x04
    1eec:	2b 83       	std	Y+3, r18	; 0x03
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef2:	81 30       	cpi	r24, 0x01	; 1
    1ef4:	91 05       	cpc	r25, r1
    1ef6:	d1 f0       	breq	.+52     	; 0x1f2c <GPIO_setupPortDirection+0x5e>
    1ef8:	2b 81       	ldd	r18, Y+3	; 0x03
    1efa:	3c 81       	ldd	r19, Y+4	; 0x04
    1efc:	22 30       	cpi	r18, 0x02	; 2
    1efe:	31 05       	cpc	r19, r1
    1f00:	2c f4       	brge	.+10     	; 0x1f0c <GPIO_setupPortDirection+0x3e>
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	9c 81       	ldd	r25, Y+4	; 0x04
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	61 f0       	breq	.+24     	; 0x1f22 <GPIO_setupPortDirection+0x54>
    1f0a:	1e c0       	rjmp	.+60     	; 0x1f48 <GPIO_setupPortDirection+0x7a>
    1f0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f10:	22 30       	cpi	r18, 0x02	; 2
    1f12:	31 05       	cpc	r19, r1
    1f14:	81 f0       	breq	.+32     	; 0x1f36 <GPIO_setupPortDirection+0x68>
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1a:	83 30       	cpi	r24, 0x03	; 3
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	81 f0       	breq	.+32     	; 0x1f40 <GPIO_setupPortDirection+0x72>
    1f20:	13 c0       	rjmp	.+38     	; 0x1f48 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1f22:	ea e3       	ldi	r30, 0x3A	; 58
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	80 83       	st	Z, r24
    1f2a:	0e c0       	rjmp	.+28     	; 0x1f48 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1f2c:	e7 e3       	ldi	r30, 0x37	; 55
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	80 83       	st	Z, r24
    1f34:	09 c0       	rjmp	.+18     	; 0x1f48 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1f36:	e4 e3       	ldi	r30, 0x34	; 52
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3c:	80 83       	st	Z, r24
    1f3e:	04 c0       	rjmp	.+8      	; 0x1f48 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1f40:	e1 e3       	ldi	r30, 0x31	; 49
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	8a 81       	ldd	r24, Y+2	; 0x02
    1f46:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	00 d0       	rcall	.+0      	; 0x1f5c <GPIO_writePort+0x6>
    1f5c:	00 d0       	rcall	.+0      	; 0x1f5e <GPIO_writePort+0x8>
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	84 30       	cpi	r24, 0x04	; 4
    1f6a:	90 f5       	brcc	.+100    	; 0x1fd0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	28 2f       	mov	r18, r24
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	3c 83       	std	Y+4, r19	; 0x04
    1f74:	2b 83       	std	Y+3, r18	; 0x03
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7a:	81 30       	cpi	r24, 0x01	; 1
    1f7c:	91 05       	cpc	r25, r1
    1f7e:	d1 f0       	breq	.+52     	; 0x1fb4 <GPIO_writePort+0x5e>
    1f80:	2b 81       	ldd	r18, Y+3	; 0x03
    1f82:	3c 81       	ldd	r19, Y+4	; 0x04
    1f84:	22 30       	cpi	r18, 0x02	; 2
    1f86:	31 05       	cpc	r19, r1
    1f88:	2c f4       	brge	.+10     	; 0x1f94 <GPIO_writePort+0x3e>
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8e:	00 97       	sbiw	r24, 0x00	; 0
    1f90:	61 f0       	breq	.+24     	; 0x1faa <GPIO_writePort+0x54>
    1f92:	1e c0       	rjmp	.+60     	; 0x1fd0 <GPIO_writePort+0x7a>
    1f94:	2b 81       	ldd	r18, Y+3	; 0x03
    1f96:	3c 81       	ldd	r19, Y+4	; 0x04
    1f98:	22 30       	cpi	r18, 0x02	; 2
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	81 f0       	breq	.+32     	; 0x1fbe <GPIO_writePort+0x68>
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa2:	83 30       	cpi	r24, 0x03	; 3
    1fa4:	91 05       	cpc	r25, r1
    1fa6:	81 f0       	breq	.+32     	; 0x1fc8 <GPIO_writePort+0x72>
    1fa8:	13 c0       	rjmp	.+38     	; 0x1fd0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1faa:	eb e3       	ldi	r30, 0x3B	; 59
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	80 83       	st	Z, r24
    1fb2:	0e c0       	rjmp	.+28     	; 0x1fd0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1fb4:	e8 e3       	ldi	r30, 0x38	; 56
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	80 83       	st	Z, r24
    1fbc:	09 c0       	rjmp	.+18     	; 0x1fd0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1fbe:	e5 e3       	ldi	r30, 0x35	; 53
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	80 83       	st	Z, r24
    1fc6:	04 c0       	rjmp	.+8      	; 0x1fd0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1fc8:	e2 e3       	ldi	r30, 0x32	; 50
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	80 83       	st	Z, r24
			break;
		}
	}
}
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	08 95       	ret

00001fde <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1fde:	df 93       	push	r29
    1fe0:	cf 93       	push	r28
    1fe2:	00 d0       	rcall	.+0      	; 0x1fe4 <GPIO_readPort+0x6>
    1fe4:	00 d0       	rcall	.+0      	; 0x1fe6 <GPIO_readPort+0x8>
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1fec:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	84 30       	cpi	r24, 0x04	; 4
    1ff2:	90 f5       	brcc	.+100    	; 0x2058 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	3c 83       	std	Y+4, r19	; 0x04
    1ffc:	2b 83       	std	Y+3, r18	; 0x03
    1ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    2000:	9c 81       	ldd	r25, Y+4	; 0x04
    2002:	81 30       	cpi	r24, 0x01	; 1
    2004:	91 05       	cpc	r25, r1
    2006:	d1 f0       	breq	.+52     	; 0x203c <GPIO_readPort+0x5e>
    2008:	2b 81       	ldd	r18, Y+3	; 0x03
    200a:	3c 81       	ldd	r19, Y+4	; 0x04
    200c:	22 30       	cpi	r18, 0x02	; 2
    200e:	31 05       	cpc	r19, r1
    2010:	2c f4       	brge	.+10     	; 0x201c <GPIO_readPort+0x3e>
    2012:	8b 81       	ldd	r24, Y+3	; 0x03
    2014:	9c 81       	ldd	r25, Y+4	; 0x04
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	61 f0       	breq	.+24     	; 0x2032 <GPIO_readPort+0x54>
    201a:	1e c0       	rjmp	.+60     	; 0x2058 <GPIO_readPort+0x7a>
    201c:	2b 81       	ldd	r18, Y+3	; 0x03
    201e:	3c 81       	ldd	r19, Y+4	; 0x04
    2020:	22 30       	cpi	r18, 0x02	; 2
    2022:	31 05       	cpc	r19, r1
    2024:	81 f0       	breq	.+32     	; 0x2046 <GPIO_readPort+0x68>
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	9c 81       	ldd	r25, Y+4	; 0x04
    202a:	83 30       	cpi	r24, 0x03	; 3
    202c:	91 05       	cpc	r25, r1
    202e:	81 f0       	breq	.+32     	; 0x2050 <GPIO_readPort+0x72>
    2030:	13 c0       	rjmp	.+38     	; 0x2058 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2032:	e9 e3       	ldi	r30, 0x39	; 57
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	89 83       	std	Y+1, r24	; 0x01
    203a:	0e c0       	rjmp	.+28     	; 0x2058 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    203c:	e6 e3       	ldi	r30, 0x36	; 54
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	89 83       	std	Y+1, r24	; 0x01
    2044:	09 c0       	rjmp	.+18     	; 0x2058 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2046:	e3 e3       	ldi	r30, 0x33	; 51
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	89 83       	std	Y+1, r24	; 0x01
    204e:	04 c0       	rjmp	.+8      	; 0x2058 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2050:	e0 e3       	ldi	r30, 0x30	; 48
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2058:	89 81       	ldd	r24, Y+1	; 0x01
}
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	cf 91       	pop	r28
    2064:	df 91       	pop	r29
    2066:	08 95       	ret

00002068 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	00 d0       	rcall	.+0      	; 0x206e <KEYPAD_getPressedKey+0x6>
    206e:	0f 92       	push	r0
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2074:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2076:	1b 82       	std	Y+3, r1	; 0x03
    2078:	43 c0       	rjmp	.+134    	; 0x2100 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    207a:	82 e0       	ldi	r24, 0x02	; 2
    207c:	60 e0       	ldi	r22, 0x00	; 0
    207e:	0e 94 67 0f 	call	0x1ece	; 0x1ece <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    2082:	8b 81       	ldd	r24, Y+3	; 0x03
    2084:	98 2f       	mov	r25, r24
    2086:	9c 5f       	subi	r25, 0xFC	; 252
    2088:	82 e0       	ldi	r24, 0x02	; 2
    208a:	69 2f       	mov	r22, r25
    208c:	41 e0       	ldi	r20, 0x01	; 1
    208e:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2092:	8b 81       	ldd	r24, Y+3	; 0x03
    2094:	88 2f       	mov	r24, r24
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	9c 01       	movw	r18, r24
    209a:	2c 5f       	subi	r18, 0xFC	; 252
    209c:	3f 4f       	sbci	r19, 0xFF	; 255
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <KEYPAD_getPressedKey+0x40>
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	2a 95       	dec	r18
    20aa:	e2 f7       	brpl	.-8      	; 0x20a4 <KEYPAD_getPressedKey+0x3c>
    20ac:	80 95       	com	r24
    20ae:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    20b0:	82 e0       	ldi	r24, 0x02	; 2
    20b2:	69 81       	ldd	r22, Y+1	; 0x01
    20b4:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    20b8:	1a 82       	std	Y+2, r1	; 0x02
    20ba:	1c c0       	rjmp	.+56     	; 0x20f4 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    20bc:	82 e0       	ldi	r24, 0x02	; 2
    20be:	6a 81       	ldd	r22, Y+2	; 0x02
    20c0:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <GPIO_readPin>
    20c4:	88 23       	and	r24, r24
    20c6:	99 f4       	brne	.+38     	; 0x20ee <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	88 2f       	mov	r24, r24
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	88 0f       	add	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	98 2f       	mov	r25, r24
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	89 0f       	add	r24, r25
    20dc:	8f 5f       	subi	r24, 0xFF	; 255
    20de:	0e 94 85 10 	call	0x210a	; 0x210a <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	8f 5f       	subi	r24, 0xFF	; 255
    20f2:	8a 83       	std	Y+2, r24	; 0x02
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	84 30       	cpi	r24, 0x04	; 4
    20f8:	08 f3       	brcs	.-62     	; 0x20bc <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	8f 5f       	subi	r24, 0xFF	; 255
    20fe:	8b 83       	std	Y+3, r24	; 0x03
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	84 30       	cpi	r24, 0x04	; 4
    2104:	08 f4       	brcc	.+2      	; 0x2108 <KEYPAD_getPressedKey+0xa0>
    2106:	b9 cf       	rjmp	.-142    	; 0x207a <KEYPAD_getPressedKey+0x12>
    2108:	b6 cf       	rjmp	.-148    	; 0x2076 <KEYPAD_getPressedKey+0xe>

0000210a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	00 d0       	rcall	.+0      	; 0x2110 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2110:	00 d0       	rcall	.+0      	; 0x2112 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2118:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	3c 83       	std	Y+4, r19	; 0x04
    2122:	2b 83       	std	Y+3, r18	; 0x03
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	9c 81       	ldd	r25, Y+4	; 0x04
    2128:	88 30       	cpi	r24, 0x08	; 8
    212a:	91 05       	cpc	r25, r1
    212c:	09 f4       	brne	.+2      	; 0x2130 <KEYPAD_4x4_adjustKeyNumber+0x26>
    212e:	70 c0       	rjmp	.+224    	; 0x2210 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2130:	2b 81       	ldd	r18, Y+3	; 0x03
    2132:	3c 81       	ldd	r19, Y+4	; 0x04
    2134:	29 30       	cpi	r18, 0x09	; 9
    2136:	31 05       	cpc	r19, r1
    2138:	5c f5       	brge	.+86     	; 0x2190 <KEYPAD_4x4_adjustKeyNumber+0x86>
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	9c 81       	ldd	r25, Y+4	; 0x04
    213e:	84 30       	cpi	r24, 0x04	; 4
    2140:	91 05       	cpc	r25, r1
    2142:	09 f4       	brne	.+2      	; 0x2146 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2144:	59 c0       	rjmp	.+178    	; 0x21f8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2146:	2b 81       	ldd	r18, Y+3	; 0x03
    2148:	3c 81       	ldd	r19, Y+4	; 0x04
    214a:	25 30       	cpi	r18, 0x05	; 5
    214c:	31 05       	cpc	r19, r1
    214e:	9c f4       	brge	.+38     	; 0x2176 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	82 30       	cpi	r24, 0x02	; 2
    2156:	91 05       	cpc	r25, r1
    2158:	09 f4       	brne	.+2      	; 0x215c <KEYPAD_4x4_adjustKeyNumber+0x52>
    215a:	48 c0       	rjmp	.+144    	; 0x21ec <KEYPAD_4x4_adjustKeyNumber+0xe2>
    215c:	2b 81       	ldd	r18, Y+3	; 0x03
    215e:	3c 81       	ldd	r19, Y+4	; 0x04
    2160:	23 30       	cpi	r18, 0x03	; 3
    2162:	31 05       	cpc	r19, r1
    2164:	0c f0       	brlt	.+2      	; 0x2168 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2166:	45 c0       	rjmp	.+138    	; 0x21f2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	9c 81       	ldd	r25, Y+4	; 0x04
    216c:	81 30       	cpi	r24, 0x01	; 1
    216e:	91 05       	cpc	r25, r1
    2170:	09 f4       	brne	.+2      	; 0x2174 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2172:	39 c0       	rjmp	.+114    	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2174:	67 c0       	rjmp	.+206    	; 0x2244 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2176:	2b 81       	ldd	r18, Y+3	; 0x03
    2178:	3c 81       	ldd	r19, Y+4	; 0x04
    217a:	26 30       	cpi	r18, 0x06	; 6
    217c:	31 05       	cpc	r19, r1
    217e:	09 f4       	brne	.+2      	; 0x2182 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2180:	41 c0       	rjmp	.+130    	; 0x2204 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	9c 81       	ldd	r25, Y+4	; 0x04
    2186:	87 30       	cpi	r24, 0x07	; 7
    2188:	91 05       	cpc	r25, r1
    218a:	0c f0       	brlt	.+2      	; 0x218e <KEYPAD_4x4_adjustKeyNumber+0x84>
    218c:	3e c0       	rjmp	.+124    	; 0x220a <KEYPAD_4x4_adjustKeyNumber+0x100>
    218e:	37 c0       	rjmp	.+110    	; 0x21fe <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2190:	2b 81       	ldd	r18, Y+3	; 0x03
    2192:	3c 81       	ldd	r19, Y+4	; 0x04
    2194:	2c 30       	cpi	r18, 0x0C	; 12
    2196:	31 05       	cpc	r19, r1
    2198:	09 f4       	brne	.+2      	; 0x219c <KEYPAD_4x4_adjustKeyNumber+0x92>
    219a:	46 c0       	rjmp	.+140    	; 0x2228 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    219c:	8b 81       	ldd	r24, Y+3	; 0x03
    219e:	9c 81       	ldd	r25, Y+4	; 0x04
    21a0:	8d 30       	cpi	r24, 0x0D	; 13
    21a2:	91 05       	cpc	r25, r1
    21a4:	5c f4       	brge	.+22     	; 0x21bc <KEYPAD_4x4_adjustKeyNumber+0xb2>
    21a6:	2b 81       	ldd	r18, Y+3	; 0x03
    21a8:	3c 81       	ldd	r19, Y+4	; 0x04
    21aa:	2a 30       	cpi	r18, 0x0A	; 10
    21ac:	31 05       	cpc	r19, r1
    21ae:	b1 f1       	breq	.+108    	; 0x221c <KEYPAD_4x4_adjustKeyNumber+0x112>
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	9c 81       	ldd	r25, Y+4	; 0x04
    21b4:	8b 30       	cpi	r24, 0x0B	; 11
    21b6:	91 05       	cpc	r25, r1
    21b8:	a4 f5       	brge	.+104    	; 0x2222 <KEYPAD_4x4_adjustKeyNumber+0x118>
    21ba:	2d c0       	rjmp	.+90     	; 0x2216 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    21bc:	2b 81       	ldd	r18, Y+3	; 0x03
    21be:	3c 81       	ldd	r19, Y+4	; 0x04
    21c0:	2e 30       	cpi	r18, 0x0E	; 14
    21c2:	31 05       	cpc	r19, r1
    21c4:	b9 f1       	breq	.+110    	; 0x2234 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	8e 30       	cpi	r24, 0x0E	; 14
    21cc:	91 05       	cpc	r25, r1
    21ce:	7c f1       	brlt	.+94     	; 0x222e <KEYPAD_4x4_adjustKeyNumber+0x124>
    21d0:	2b 81       	ldd	r18, Y+3	; 0x03
    21d2:	3c 81       	ldd	r19, Y+4	; 0x04
    21d4:	2f 30       	cpi	r18, 0x0F	; 15
    21d6:	31 05       	cpc	r19, r1
    21d8:	79 f1       	breq	.+94     	; 0x2238 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	9c 81       	ldd	r25, Y+4	; 0x04
    21de:	80 31       	cpi	r24, 0x10	; 16
    21e0:	91 05       	cpc	r25, r1
    21e2:	69 f1       	breq	.+90     	; 0x223e <KEYPAD_4x4_adjustKeyNumber+0x134>
    21e4:	2f c0       	rjmp	.+94     	; 0x2244 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    21e6:	87 e0       	ldi	r24, 0x07	; 7
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	2e c0       	rjmp	.+92     	; 0x2248 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    21ec:	88 e0       	ldi	r24, 0x08	; 8
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	2b c0       	rjmp	.+86     	; 0x2248 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    21f2:	89 e0       	ldi	r24, 0x09	; 9
    21f4:	89 83       	std	Y+1, r24	; 0x01
    21f6:	28 c0       	rjmp	.+80     	; 0x2248 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    21f8:	85 e2       	ldi	r24, 0x25	; 37
    21fa:	89 83       	std	Y+1, r24	; 0x01
    21fc:	25 c0       	rjmp	.+74     	; 0x2248 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    21fe:	84 e0       	ldi	r24, 0x04	; 4
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	22 c0       	rjmp	.+68     	; 0x2248 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2204:	85 e0       	ldi	r24, 0x05	; 5
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	1f c0       	rjmp	.+62     	; 0x2248 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    220a:	86 e0       	ldi	r24, 0x06	; 6
    220c:	89 83       	std	Y+1, r24	; 0x01
    220e:	1c c0       	rjmp	.+56     	; 0x2248 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2210:	8a e2       	ldi	r24, 0x2A	; 42
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	19 c0       	rjmp	.+50     	; 0x2248 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	89 83       	std	Y+1, r24	; 0x01
    221a:	16 c0       	rjmp	.+44     	; 0x2248 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    221c:	82 e0       	ldi	r24, 0x02	; 2
    221e:	89 83       	std	Y+1, r24	; 0x01
    2220:	13 c0       	rjmp	.+38     	; 0x2248 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2222:	83 e0       	ldi	r24, 0x03	; 3
    2224:	89 83       	std	Y+1, r24	; 0x01
    2226:	10 c0       	rjmp	.+32     	; 0x2248 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2228:	8d e2       	ldi	r24, 0x2D	; 45
    222a:	89 83       	std	Y+1, r24	; 0x01
    222c:	0d c0       	rjmp	.+26     	; 0x2248 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    222e:	8d e0       	ldi	r24, 0x0D	; 13
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	0a c0       	rjmp	.+20     	; 0x2248 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2234:	19 82       	std	Y+1, r1	; 0x01
    2236:	08 c0       	rjmp	.+16     	; 0x2248 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2238:	8d e3       	ldi	r24, 0x3D	; 61
    223a:	89 83       	std	Y+1, r24	; 0x01
    223c:	05 c0       	rjmp	.+10     	; 0x2248 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    223e:	8b e2       	ldi	r24, 0x2B	; 43
    2240:	89 83       	std	Y+1, r24	; 0x01
    2242:	02 c0       	rjmp	.+4      	; 0x2248 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2244:	8a 81       	ldd	r24, Y+2	; 0x02
    2246:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2248:	89 81       	ldd	r24, Y+1	; 0x01
} 
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	cf 91       	pop	r28
    2254:	df 91       	pop	r29
    2256:	08 95       	ret

00002258 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2258:	df 93       	push	r29
    225a:	cf 93       	push	r28
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	64 e0       	ldi	r22, 0x04	; 4
    2264:	41 e0       	ldi	r20, 0x01	; 1
    2266:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	65 e0       	ldi	r22, 0x05	; 5
    226e:	41 e0       	ldi	r20, 0x01	; 1
    2270:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	66 e0       	ldi	r22, 0x06	; 6
    2278:	41 e0       	ldi	r20, 0x01	; 1
    227a:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	6f ef       	ldi	r22, 0xFF	; 255
    2282:	0e 94 67 0f 	call	0x1ece	; 0x1ece <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2286:	88 e3       	ldi	r24, 0x38	; 56
    2288:	0e 94 4f 11 	call	0x229e	; 0x229e <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    228c:	8c e0       	ldi	r24, 0x0C	; 12
    228e:	0e 94 4f 11 	call	0x229e	; 0x229e <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	0e 94 4f 11 	call	0x229e	; 0x229e <LCD_sendCommand>
}
    2298:	cf 91       	pop	r28
    229a:	df 91       	pop	r29
    229c:	08 95       	ret

0000229e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    229e:	df 93       	push	r29
    22a0:	cf 93       	push	r28
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    22a6:	e9 97       	sbiw	r28, 0x39	; 57
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	64 e0       	ldi	r22, 0x04	; 4
    22b8:	40 e0       	ldi	r20, 0x00	; 0
    22ba:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	65 e0       	ldi	r22, 0x05	; 5
    22c2:	40 e0       	ldi	r20, 0x00	; 0
    22c4:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <GPIO_writePin>
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	a0 e8       	ldi	r26, 0x80	; 128
    22ce:	bf e3       	ldi	r27, 0x3F	; 63
    22d0:	8d ab       	std	Y+53, r24	; 0x35
    22d2:	9e ab       	std	Y+54, r25	; 0x36
    22d4:	af ab       	std	Y+55, r26	; 0x37
    22d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d8:	6d a9       	ldd	r22, Y+53	; 0x35
    22da:	7e a9       	ldd	r23, Y+54	; 0x36
    22dc:	8f a9       	ldd	r24, Y+55	; 0x37
    22de:	98 ad       	ldd	r25, Y+56	; 0x38
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	4a ef       	ldi	r20, 0xFA	; 250
    22e6:	54 e4       	ldi	r21, 0x44	; 68
    22e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	89 ab       	std	Y+49, r24	; 0x31
    22f2:	9a ab       	std	Y+50, r25	; 0x32
    22f4:	ab ab       	std	Y+51, r26	; 0x33
    22f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22f8:	69 a9       	ldd	r22, Y+49	; 0x31
    22fa:	7a a9       	ldd	r23, Y+50	; 0x32
    22fc:	8b a9       	ldd	r24, Y+51	; 0x33
    22fe:	9c a9       	ldd	r25, Y+52	; 0x34
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e8       	ldi	r20, 0x80	; 128
    2306:	5f e3       	ldi	r21, 0x3F	; 63
    2308:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    230c:	88 23       	and	r24, r24
    230e:	2c f4       	brge	.+10     	; 0x231a <LCD_sendCommand+0x7c>
		__ticks = 1;
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	98 ab       	std	Y+48, r25	; 0x30
    2316:	8f a7       	std	Y+47, r24	; 0x2f
    2318:	3f c0       	rjmp	.+126    	; 0x2398 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    231a:	69 a9       	ldd	r22, Y+49	; 0x31
    231c:	7a a9       	ldd	r23, Y+50	; 0x32
    231e:	8b a9       	ldd	r24, Y+51	; 0x33
    2320:	9c a9       	ldd	r25, Y+52	; 0x34
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	3f ef       	ldi	r19, 0xFF	; 255
    2326:	4f e7       	ldi	r20, 0x7F	; 127
    2328:	57 e4       	ldi	r21, 0x47	; 71
    232a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    232e:	18 16       	cp	r1, r24
    2330:	4c f5       	brge	.+82     	; 0x2384 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2332:	6d a9       	ldd	r22, Y+53	; 0x35
    2334:	7e a9       	ldd	r23, Y+54	; 0x36
    2336:	8f a9       	ldd	r24, Y+55	; 0x37
    2338:	98 ad       	ldd	r25, Y+56	; 0x38
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e2       	ldi	r20, 0x20	; 32
    2340:	51 e4       	ldi	r21, 0x41	; 65
    2342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	bc 01       	movw	r22, r24
    234c:	cd 01       	movw	r24, r26
    234e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	98 ab       	std	Y+48, r25	; 0x30
    2358:	8f a7       	std	Y+47, r24	; 0x2f
    235a:	0f c0       	rjmp	.+30     	; 0x237a <LCD_sendCommand+0xdc>
    235c:	88 ec       	ldi	r24, 0xC8	; 200
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	9e a7       	std	Y+46, r25	; 0x2e
    2362:	8d a7       	std	Y+45, r24	; 0x2d
    2364:	8d a5       	ldd	r24, Y+45	; 0x2d
    2366:	9e a5       	ldd	r25, Y+46	; 0x2e
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <LCD_sendCommand+0xca>
    236c:	9e a7       	std	Y+46, r25	; 0x2e
    236e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2370:	8f a5       	ldd	r24, Y+47	; 0x2f
    2372:	98 a9       	ldd	r25, Y+48	; 0x30
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	98 ab       	std	Y+48, r25	; 0x30
    2378:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237a:	8f a5       	ldd	r24, Y+47	; 0x2f
    237c:	98 a9       	ldd	r25, Y+48	; 0x30
    237e:	00 97       	sbiw	r24, 0x00	; 0
    2380:	69 f7       	brne	.-38     	; 0x235c <LCD_sendCommand+0xbe>
    2382:	14 c0       	rjmp	.+40     	; 0x23ac <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2384:	69 a9       	ldd	r22, Y+49	; 0x31
    2386:	7a a9       	ldd	r23, Y+50	; 0x32
    2388:	8b a9       	ldd	r24, Y+51	; 0x33
    238a:	9c a9       	ldd	r25, Y+52	; 0x34
    238c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	98 ab       	std	Y+48, r25	; 0x30
    2396:	8f a7       	std	Y+47, r24	; 0x2f
    2398:	8f a5       	ldd	r24, Y+47	; 0x2f
    239a:	98 a9       	ldd	r25, Y+48	; 0x30
    239c:	9c a7       	std	Y+44, r25	; 0x2c
    239e:	8b a7       	std	Y+43, r24	; 0x2b
    23a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    23a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	f1 f7       	brne	.-4      	; 0x23a4 <LCD_sendCommand+0x106>
    23a8:	9c a7       	std	Y+44, r25	; 0x2c
    23aa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	66 e0       	ldi	r22, 0x06	; 6
    23b0:	41 e0       	ldi	r20, 0x01	; 1
    23b2:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <GPIO_writePin>
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	a0 e8       	ldi	r26, 0x80	; 128
    23bc:	bf e3       	ldi	r27, 0x3F	; 63
    23be:	8f a3       	std	Y+39, r24	; 0x27
    23c0:	98 a7       	std	Y+40, r25	; 0x28
    23c2:	a9 a7       	std	Y+41, r26	; 0x29
    23c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c6:	6f a1       	ldd	r22, Y+39	; 0x27
    23c8:	78 a5       	ldd	r23, Y+40	; 0x28
    23ca:	89 a5       	ldd	r24, Y+41	; 0x29
    23cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	4a ef       	ldi	r20, 0xFA	; 250
    23d4:	54 e4       	ldi	r21, 0x44	; 68
    23d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	8b a3       	std	Y+35, r24	; 0x23
    23e0:	9c a3       	std	Y+36, r25	; 0x24
    23e2:	ad a3       	std	Y+37, r26	; 0x25
    23e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23e6:	6b a1       	ldd	r22, Y+35	; 0x23
    23e8:	7c a1       	ldd	r23, Y+36	; 0x24
    23ea:	8d a1       	ldd	r24, Y+37	; 0x25
    23ec:	9e a1       	ldd	r25, Y+38	; 0x26
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	40 e8       	ldi	r20, 0x80	; 128
    23f4:	5f e3       	ldi	r21, 0x3F	; 63
    23f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23fa:	88 23       	and	r24, r24
    23fc:	2c f4       	brge	.+10     	; 0x2408 <LCD_sendCommand+0x16a>
		__ticks = 1;
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	9a a3       	std	Y+34, r25	; 0x22
    2404:	89 a3       	std	Y+33, r24	; 0x21
    2406:	3f c0       	rjmp	.+126    	; 0x2486 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    2408:	6b a1       	ldd	r22, Y+35	; 0x23
    240a:	7c a1       	ldd	r23, Y+36	; 0x24
    240c:	8d a1       	ldd	r24, Y+37	; 0x25
    240e:	9e a1       	ldd	r25, Y+38	; 0x26
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	3f ef       	ldi	r19, 0xFF	; 255
    2414:	4f e7       	ldi	r20, 0x7F	; 127
    2416:	57 e4       	ldi	r21, 0x47	; 71
    2418:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    241c:	18 16       	cp	r1, r24
    241e:	4c f5       	brge	.+82     	; 0x2472 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2420:	6f a1       	ldd	r22, Y+39	; 0x27
    2422:	78 a5       	ldd	r23, Y+40	; 0x28
    2424:	89 a5       	ldd	r24, Y+41	; 0x29
    2426:	9a a5       	ldd	r25, Y+42	; 0x2a
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	40 e2       	ldi	r20, 0x20	; 32
    242e:	51 e4       	ldi	r21, 0x41	; 65
    2430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	bc 01       	movw	r22, r24
    243a:	cd 01       	movw	r24, r26
    243c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	9a a3       	std	Y+34, r25	; 0x22
    2446:	89 a3       	std	Y+33, r24	; 0x21
    2448:	0f c0       	rjmp	.+30     	; 0x2468 <LCD_sendCommand+0x1ca>
    244a:	88 ec       	ldi	r24, 0xC8	; 200
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	98 a3       	std	Y+32, r25	; 0x20
    2450:	8f 8f       	std	Y+31, r24	; 0x1f
    2452:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2454:	98 a1       	ldd	r25, Y+32	; 0x20
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	f1 f7       	brne	.-4      	; 0x2456 <LCD_sendCommand+0x1b8>
    245a:	98 a3       	std	Y+32, r25	; 0x20
    245c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245e:	89 a1       	ldd	r24, Y+33	; 0x21
    2460:	9a a1       	ldd	r25, Y+34	; 0x22
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	9a a3       	std	Y+34, r25	; 0x22
    2466:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2468:	89 a1       	ldd	r24, Y+33	; 0x21
    246a:	9a a1       	ldd	r25, Y+34	; 0x22
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	69 f7       	brne	.-38     	; 0x244a <LCD_sendCommand+0x1ac>
    2470:	14 c0       	rjmp	.+40     	; 0x249a <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2472:	6b a1       	ldd	r22, Y+35	; 0x23
    2474:	7c a1       	ldd	r23, Y+36	; 0x24
    2476:	8d a1       	ldd	r24, Y+37	; 0x25
    2478:	9e a1       	ldd	r25, Y+38	; 0x26
    247a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	9a a3       	std	Y+34, r25	; 0x22
    2484:	89 a3       	std	Y+33, r24	; 0x21
    2486:	89 a1       	ldd	r24, Y+33	; 0x21
    2488:	9a a1       	ldd	r25, Y+34	; 0x22
    248a:	9e 8f       	std	Y+30, r25	; 0x1e
    248c:	8d 8f       	std	Y+29, r24	; 0x1d
    248e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2490:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	f1 f7       	brne	.-4      	; 0x2492 <LCD_sendCommand+0x1f4>
    2496:	9e 8f       	std	Y+30, r25	; 0x1e
    2498:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	69 ad       	ldd	r22, Y+57	; 0x39
    249e:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <GPIO_writePort>
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	a0 e8       	ldi	r26, 0x80	; 128
    24a8:	bf e3       	ldi	r27, 0x3F	; 63
    24aa:	89 8f       	std	Y+25, r24	; 0x19
    24ac:	9a 8f       	std	Y+26, r25	; 0x1a
    24ae:	ab 8f       	std	Y+27, r26	; 0x1b
    24b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b2:	69 8d       	ldd	r22, Y+25	; 0x19
    24b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	4a ef       	ldi	r20, 0xFA	; 250
    24c0:	54 e4       	ldi	r21, 0x44	; 68
    24c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	8d 8b       	std	Y+21, r24	; 0x15
    24cc:	9e 8b       	std	Y+22, r25	; 0x16
    24ce:	af 8b       	std	Y+23, r26	; 0x17
    24d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24d2:	6d 89       	ldd	r22, Y+21	; 0x15
    24d4:	7e 89       	ldd	r23, Y+22	; 0x16
    24d6:	8f 89       	ldd	r24, Y+23	; 0x17
    24d8:	98 8d       	ldd	r25, Y+24	; 0x18
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e8       	ldi	r20, 0x80	; 128
    24e0:	5f e3       	ldi	r21, 0x3F	; 63
    24e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24e6:	88 23       	and	r24, r24
    24e8:	2c f4       	brge	.+10     	; 0x24f4 <LCD_sendCommand+0x256>
		__ticks = 1;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	9c 8b       	std	Y+20, r25	; 0x14
    24f0:	8b 8b       	std	Y+19, r24	; 0x13
    24f2:	3f c0       	rjmp	.+126    	; 0x2572 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    24f4:	6d 89       	ldd	r22, Y+21	; 0x15
    24f6:	7e 89       	ldd	r23, Y+22	; 0x16
    24f8:	8f 89       	ldd	r24, Y+23	; 0x17
    24fa:	98 8d       	ldd	r25, Y+24	; 0x18
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	3f ef       	ldi	r19, 0xFF	; 255
    2500:	4f e7       	ldi	r20, 0x7F	; 127
    2502:	57 e4       	ldi	r21, 0x47	; 71
    2504:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2508:	18 16       	cp	r1, r24
    250a:	4c f5       	brge	.+82     	; 0x255e <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250c:	69 8d       	ldd	r22, Y+25	; 0x19
    250e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2510:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2512:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e2       	ldi	r20, 0x20	; 32
    251a:	51 e4       	ldi	r21, 0x41	; 65
    251c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	bc 01       	movw	r22, r24
    2526:	cd 01       	movw	r24, r26
    2528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	9c 8b       	std	Y+20, r25	; 0x14
    2532:	8b 8b       	std	Y+19, r24	; 0x13
    2534:	0f c0       	rjmp	.+30     	; 0x2554 <LCD_sendCommand+0x2b6>
    2536:	88 ec       	ldi	r24, 0xC8	; 200
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	9a 8b       	std	Y+18, r25	; 0x12
    253c:	89 8b       	std	Y+17, r24	; 0x11
    253e:	89 89       	ldd	r24, Y+17	; 0x11
    2540:	9a 89       	ldd	r25, Y+18	; 0x12
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	f1 f7       	brne	.-4      	; 0x2542 <LCD_sendCommand+0x2a4>
    2546:	9a 8b       	std	Y+18, r25	; 0x12
    2548:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254a:	8b 89       	ldd	r24, Y+19	; 0x13
    254c:	9c 89       	ldd	r25, Y+20	; 0x14
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	9c 8b       	std	Y+20, r25	; 0x14
    2552:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2554:	8b 89       	ldd	r24, Y+19	; 0x13
    2556:	9c 89       	ldd	r25, Y+20	; 0x14
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	69 f7       	brne	.-38     	; 0x2536 <LCD_sendCommand+0x298>
    255c:	14 c0       	rjmp	.+40     	; 0x2586 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255e:	6d 89       	ldd	r22, Y+21	; 0x15
    2560:	7e 89       	ldd	r23, Y+22	; 0x16
    2562:	8f 89       	ldd	r24, Y+23	; 0x17
    2564:	98 8d       	ldd	r25, Y+24	; 0x18
    2566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	9c 8b       	std	Y+20, r25	; 0x14
    2570:	8b 8b       	std	Y+19, r24	; 0x13
    2572:	8b 89       	ldd	r24, Y+19	; 0x13
    2574:	9c 89       	ldd	r25, Y+20	; 0x14
    2576:	98 8b       	std	Y+16, r25	; 0x10
    2578:	8f 87       	std	Y+15, r24	; 0x0f
    257a:	8f 85       	ldd	r24, Y+15	; 0x0f
    257c:	98 89       	ldd	r25, Y+16	; 0x10
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	f1 f7       	brne	.-4      	; 0x257e <LCD_sendCommand+0x2e0>
    2582:	98 8b       	std	Y+16, r25	; 0x10
    2584:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	66 e0       	ldi	r22, 0x06	; 6
    258a:	40 e0       	ldi	r20, 0x00	; 0
    258c:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <GPIO_writePin>
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	a0 e8       	ldi	r26, 0x80	; 128
    2596:	bf e3       	ldi	r27, 0x3F	; 63
    2598:	8b 87       	std	Y+11, r24	; 0x0b
    259a:	9c 87       	std	Y+12, r25	; 0x0c
    259c:	ad 87       	std	Y+13, r26	; 0x0d
    259e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	4a ef       	ldi	r20, 0xFA	; 250
    25ae:	54 e4       	ldi	r21, 0x44	; 68
    25b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	8f 83       	std	Y+7, r24	; 0x07
    25ba:	98 87       	std	Y+8, r25	; 0x08
    25bc:	a9 87       	std	Y+9, r26	; 0x09
    25be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25c0:	6f 81       	ldd	r22, Y+7	; 0x07
    25c2:	78 85       	ldd	r23, Y+8	; 0x08
    25c4:	89 85       	ldd	r24, Y+9	; 0x09
    25c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e8       	ldi	r20, 0x80	; 128
    25ce:	5f e3       	ldi	r21, 0x3F	; 63
    25d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d4:	88 23       	and	r24, r24
    25d6:	2c f4       	brge	.+10     	; 0x25e2 <LCD_sendCommand+0x344>
		__ticks = 1;
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	9e 83       	std	Y+6, r25	; 0x06
    25de:	8d 83       	std	Y+5, r24	; 0x05
    25e0:	3f c0       	rjmp	.+126    	; 0x2660 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    25e2:	6f 81       	ldd	r22, Y+7	; 0x07
    25e4:	78 85       	ldd	r23, Y+8	; 0x08
    25e6:	89 85       	ldd	r24, Y+9	; 0x09
    25e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	3f ef       	ldi	r19, 0xFF	; 255
    25ee:	4f e7       	ldi	r20, 0x7F	; 127
    25f0:	57 e4       	ldi	r21, 0x47	; 71
    25f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f6:	18 16       	cp	r1, r24
    25f8:	4c f5       	brge	.+82     	; 0x264c <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    25fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    25fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2600:	9e 85       	ldd	r25, Y+14	; 0x0e
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	40 e2       	ldi	r20, 0x20	; 32
    2608:	51 e4       	ldi	r21, 0x41	; 65
    260a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	bc 01       	movw	r22, r24
    2614:	cd 01       	movw	r24, r26
    2616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	9e 83       	std	Y+6, r25	; 0x06
    2620:	8d 83       	std	Y+5, r24	; 0x05
    2622:	0f c0       	rjmp	.+30     	; 0x2642 <LCD_sendCommand+0x3a4>
    2624:	88 ec       	ldi	r24, 0xC8	; 200
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	9c 83       	std	Y+4, r25	; 0x04
    262a:	8b 83       	std	Y+3, r24	; 0x03
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	9c 81       	ldd	r25, Y+4	; 0x04
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	f1 f7       	brne	.-4      	; 0x2630 <LCD_sendCommand+0x392>
    2634:	9c 83       	std	Y+4, r25	; 0x04
    2636:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2638:	8d 81       	ldd	r24, Y+5	; 0x05
    263a:	9e 81       	ldd	r25, Y+6	; 0x06
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	9e 83       	std	Y+6, r25	; 0x06
    2640:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2642:	8d 81       	ldd	r24, Y+5	; 0x05
    2644:	9e 81       	ldd	r25, Y+6	; 0x06
    2646:	00 97       	sbiw	r24, 0x00	; 0
    2648:	69 f7       	brne	.-38     	; 0x2624 <LCD_sendCommand+0x386>
    264a:	14 c0       	rjmp	.+40     	; 0x2674 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264c:	6f 81       	ldd	r22, Y+7	; 0x07
    264e:	78 85       	ldd	r23, Y+8	; 0x08
    2650:	89 85       	ldd	r24, Y+9	; 0x09
    2652:	9a 85       	ldd	r25, Y+10	; 0x0a
    2654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	9e 83       	std	Y+6, r25	; 0x06
    265e:	8d 83       	std	Y+5, r24	; 0x05
    2660:	8d 81       	ldd	r24, Y+5	; 0x05
    2662:	9e 81       	ldd	r25, Y+6	; 0x06
    2664:	9a 83       	std	Y+2, r25	; 0x02
    2666:	89 83       	std	Y+1, r24	; 0x01
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	9a 81       	ldd	r25, Y+2	; 0x02
    266c:	01 97       	sbiw	r24, 0x01	; 1
    266e:	f1 f7       	brne	.-4      	; 0x266c <LCD_sendCommand+0x3ce>
    2670:	9a 83       	std	Y+2, r25	; 0x02
    2672:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2674:	e9 96       	adiw	r28, 0x39	; 57
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	de bf       	out	0x3e, r29	; 62
    267c:	0f be       	out	0x3f, r0	; 63
    267e:	cd bf       	out	0x3d, r28	; 61
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	08 95       	ret

00002686 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2686:	df 93       	push	r29
    2688:	cf 93       	push	r28
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    268e:	e9 97       	sbiw	r28, 0x39	; 57
    2690:	0f b6       	in	r0, 0x3f	; 63
    2692:	f8 94       	cli
    2694:	de bf       	out	0x3e, r29	; 62
    2696:	0f be       	out	0x3f, r0	; 63
    2698:	cd bf       	out	0x3d, r28	; 61
    269a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	64 e0       	ldi	r22, 0x04	; 4
    26a0:	41 e0       	ldi	r20, 0x01	; 1
    26a2:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	65 e0       	ldi	r22, 0x05	; 5
    26aa:	40 e0       	ldi	r20, 0x00	; 0
    26ac:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <GPIO_writePin>
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	a0 e8       	ldi	r26, 0x80	; 128
    26b6:	bf e3       	ldi	r27, 0x3F	; 63
    26b8:	8d ab       	std	Y+53, r24	; 0x35
    26ba:	9e ab       	std	Y+54, r25	; 0x36
    26bc:	af ab       	std	Y+55, r26	; 0x37
    26be:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c0:	6d a9       	ldd	r22, Y+53	; 0x35
    26c2:	7e a9       	ldd	r23, Y+54	; 0x36
    26c4:	8f a9       	ldd	r24, Y+55	; 0x37
    26c6:	98 ad       	ldd	r25, Y+56	; 0x38
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	4a ef       	ldi	r20, 0xFA	; 250
    26ce:	54 e4       	ldi	r21, 0x44	; 68
    26d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	89 ab       	std	Y+49, r24	; 0x31
    26da:	9a ab       	std	Y+50, r25	; 0x32
    26dc:	ab ab       	std	Y+51, r26	; 0x33
    26de:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26e0:	69 a9       	ldd	r22, Y+49	; 0x31
    26e2:	7a a9       	ldd	r23, Y+50	; 0x32
    26e4:	8b a9       	ldd	r24, Y+51	; 0x33
    26e6:	9c a9       	ldd	r25, Y+52	; 0x34
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	40 e8       	ldi	r20, 0x80	; 128
    26ee:	5f e3       	ldi	r21, 0x3F	; 63
    26f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f4:	88 23       	and	r24, r24
    26f6:	2c f4       	brge	.+10     	; 0x2702 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	98 ab       	std	Y+48, r25	; 0x30
    26fe:	8f a7       	std	Y+47, r24	; 0x2f
    2700:	3f c0       	rjmp	.+126    	; 0x2780 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2702:	69 a9       	ldd	r22, Y+49	; 0x31
    2704:	7a a9       	ldd	r23, Y+50	; 0x32
    2706:	8b a9       	ldd	r24, Y+51	; 0x33
    2708:	9c a9       	ldd	r25, Y+52	; 0x34
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	3f ef       	ldi	r19, 0xFF	; 255
    270e:	4f e7       	ldi	r20, 0x7F	; 127
    2710:	57 e4       	ldi	r21, 0x47	; 71
    2712:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2716:	18 16       	cp	r1, r24
    2718:	4c f5       	brge	.+82     	; 0x276c <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271a:	6d a9       	ldd	r22, Y+53	; 0x35
    271c:	7e a9       	ldd	r23, Y+54	; 0x36
    271e:	8f a9       	ldd	r24, Y+55	; 0x37
    2720:	98 ad       	ldd	r25, Y+56	; 0x38
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	40 e2       	ldi	r20, 0x20	; 32
    2728:	51 e4       	ldi	r21, 0x41	; 65
    272a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	bc 01       	movw	r22, r24
    2734:	cd 01       	movw	r24, r26
    2736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	98 ab       	std	Y+48, r25	; 0x30
    2740:	8f a7       	std	Y+47, r24	; 0x2f
    2742:	0f c0       	rjmp	.+30     	; 0x2762 <LCD_displayCharacter+0xdc>
    2744:	88 ec       	ldi	r24, 0xC8	; 200
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	9e a7       	std	Y+46, r25	; 0x2e
    274a:	8d a7       	std	Y+45, r24	; 0x2d
    274c:	8d a5       	ldd	r24, Y+45	; 0x2d
    274e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	f1 f7       	brne	.-4      	; 0x2750 <LCD_displayCharacter+0xca>
    2754:	9e a7       	std	Y+46, r25	; 0x2e
    2756:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2758:	8f a5       	ldd	r24, Y+47	; 0x2f
    275a:	98 a9       	ldd	r25, Y+48	; 0x30
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	98 ab       	std	Y+48, r25	; 0x30
    2760:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2762:	8f a5       	ldd	r24, Y+47	; 0x2f
    2764:	98 a9       	ldd	r25, Y+48	; 0x30
    2766:	00 97       	sbiw	r24, 0x00	; 0
    2768:	69 f7       	brne	.-38     	; 0x2744 <LCD_displayCharacter+0xbe>
    276a:	14 c0       	rjmp	.+40     	; 0x2794 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276c:	69 a9       	ldd	r22, Y+49	; 0x31
    276e:	7a a9       	ldd	r23, Y+50	; 0x32
    2770:	8b a9       	ldd	r24, Y+51	; 0x33
    2772:	9c a9       	ldd	r25, Y+52	; 0x34
    2774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	98 ab       	std	Y+48, r25	; 0x30
    277e:	8f a7       	std	Y+47, r24	; 0x2f
    2780:	8f a5       	ldd	r24, Y+47	; 0x2f
    2782:	98 a9       	ldd	r25, Y+48	; 0x30
    2784:	9c a7       	std	Y+44, r25	; 0x2c
    2786:	8b a7       	std	Y+43, r24	; 0x2b
    2788:	8b a5       	ldd	r24, Y+43	; 0x2b
    278a:	9c a5       	ldd	r25, Y+44	; 0x2c
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	f1 f7       	brne	.-4      	; 0x278c <LCD_displayCharacter+0x106>
    2790:	9c a7       	std	Y+44, r25	; 0x2c
    2792:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	66 e0       	ldi	r22, 0x06	; 6
    2798:	41 e0       	ldi	r20, 0x01	; 1
    279a:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <GPIO_writePin>
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	a0 e8       	ldi	r26, 0x80	; 128
    27a4:	bf e3       	ldi	r27, 0x3F	; 63
    27a6:	8f a3       	std	Y+39, r24	; 0x27
    27a8:	98 a7       	std	Y+40, r25	; 0x28
    27aa:	a9 a7       	std	Y+41, r26	; 0x29
    27ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ae:	6f a1       	ldd	r22, Y+39	; 0x27
    27b0:	78 a5       	ldd	r23, Y+40	; 0x28
    27b2:	89 a5       	ldd	r24, Y+41	; 0x29
    27b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	4a ef       	ldi	r20, 0xFA	; 250
    27bc:	54 e4       	ldi	r21, 0x44	; 68
    27be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	8b a3       	std	Y+35, r24	; 0x23
    27c8:	9c a3       	std	Y+36, r25	; 0x24
    27ca:	ad a3       	std	Y+37, r26	; 0x25
    27cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27ce:	6b a1       	ldd	r22, Y+35	; 0x23
    27d0:	7c a1       	ldd	r23, Y+36	; 0x24
    27d2:	8d a1       	ldd	r24, Y+37	; 0x25
    27d4:	9e a1       	ldd	r25, Y+38	; 0x26
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	40 e8       	ldi	r20, 0x80	; 128
    27dc:	5f e3       	ldi	r21, 0x3F	; 63
    27de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27e2:	88 23       	and	r24, r24
    27e4:	2c f4       	brge	.+10     	; 0x27f0 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	9a a3       	std	Y+34, r25	; 0x22
    27ec:	89 a3       	std	Y+33, r24	; 0x21
    27ee:	3f c0       	rjmp	.+126    	; 0x286e <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    27f0:	6b a1       	ldd	r22, Y+35	; 0x23
    27f2:	7c a1       	ldd	r23, Y+36	; 0x24
    27f4:	8d a1       	ldd	r24, Y+37	; 0x25
    27f6:	9e a1       	ldd	r25, Y+38	; 0x26
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	3f ef       	ldi	r19, 0xFF	; 255
    27fc:	4f e7       	ldi	r20, 0x7F	; 127
    27fe:	57 e4       	ldi	r21, 0x47	; 71
    2800:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2804:	18 16       	cp	r1, r24
    2806:	4c f5       	brge	.+82     	; 0x285a <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2808:	6f a1       	ldd	r22, Y+39	; 0x27
    280a:	78 a5       	ldd	r23, Y+40	; 0x28
    280c:	89 a5       	ldd	r24, Y+41	; 0x29
    280e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e2       	ldi	r20, 0x20	; 32
    2816:	51 e4       	ldi	r21, 0x41	; 65
    2818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	bc 01       	movw	r22, r24
    2822:	cd 01       	movw	r24, r26
    2824:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	9a a3       	std	Y+34, r25	; 0x22
    282e:	89 a3       	std	Y+33, r24	; 0x21
    2830:	0f c0       	rjmp	.+30     	; 0x2850 <LCD_displayCharacter+0x1ca>
    2832:	88 ec       	ldi	r24, 0xC8	; 200
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	98 a3       	std	Y+32, r25	; 0x20
    2838:	8f 8f       	std	Y+31, r24	; 0x1f
    283a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    283c:	98 a1       	ldd	r25, Y+32	; 0x20
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	f1 f7       	brne	.-4      	; 0x283e <LCD_displayCharacter+0x1b8>
    2842:	98 a3       	std	Y+32, r25	; 0x20
    2844:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2846:	89 a1       	ldd	r24, Y+33	; 0x21
    2848:	9a a1       	ldd	r25, Y+34	; 0x22
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	9a a3       	std	Y+34, r25	; 0x22
    284e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2850:	89 a1       	ldd	r24, Y+33	; 0x21
    2852:	9a a1       	ldd	r25, Y+34	; 0x22
    2854:	00 97       	sbiw	r24, 0x00	; 0
    2856:	69 f7       	brne	.-38     	; 0x2832 <LCD_displayCharacter+0x1ac>
    2858:	14 c0       	rjmp	.+40     	; 0x2882 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    285a:	6b a1       	ldd	r22, Y+35	; 0x23
    285c:	7c a1       	ldd	r23, Y+36	; 0x24
    285e:	8d a1       	ldd	r24, Y+37	; 0x25
    2860:	9e a1       	ldd	r25, Y+38	; 0x26
    2862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	9a a3       	std	Y+34, r25	; 0x22
    286c:	89 a3       	std	Y+33, r24	; 0x21
    286e:	89 a1       	ldd	r24, Y+33	; 0x21
    2870:	9a a1       	ldd	r25, Y+34	; 0x22
    2872:	9e 8f       	std	Y+30, r25	; 0x1e
    2874:	8d 8f       	std	Y+29, r24	; 0x1d
    2876:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2878:	9e 8d       	ldd	r25, Y+30	; 0x1e
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	f1 f7       	brne	.-4      	; 0x287a <LCD_displayCharacter+0x1f4>
    287e:	9e 8f       	std	Y+30, r25	; 0x1e
    2880:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	69 ad       	ldd	r22, Y+57	; 0x39
    2886:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <GPIO_writePort>
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	a0 e8       	ldi	r26, 0x80	; 128
    2890:	bf e3       	ldi	r27, 0x3F	; 63
    2892:	89 8f       	std	Y+25, r24	; 0x19
    2894:	9a 8f       	std	Y+26, r25	; 0x1a
    2896:	ab 8f       	std	Y+27, r26	; 0x1b
    2898:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289a:	69 8d       	ldd	r22, Y+25	; 0x19
    289c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    289e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	4a ef       	ldi	r20, 0xFA	; 250
    28a8:	54 e4       	ldi	r21, 0x44	; 68
    28aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	8d 8b       	std	Y+21, r24	; 0x15
    28b4:	9e 8b       	std	Y+22, r25	; 0x16
    28b6:	af 8b       	std	Y+23, r26	; 0x17
    28b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28ba:	6d 89       	ldd	r22, Y+21	; 0x15
    28bc:	7e 89       	ldd	r23, Y+22	; 0x16
    28be:	8f 89       	ldd	r24, Y+23	; 0x17
    28c0:	98 8d       	ldd	r25, Y+24	; 0x18
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	40 e8       	ldi	r20, 0x80	; 128
    28c8:	5f e3       	ldi	r21, 0x3F	; 63
    28ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ce:	88 23       	and	r24, r24
    28d0:	2c f4       	brge	.+10     	; 0x28dc <LCD_displayCharacter+0x256>
		__ticks = 1;
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	9c 8b       	std	Y+20, r25	; 0x14
    28d8:	8b 8b       	std	Y+19, r24	; 0x13
    28da:	3f c0       	rjmp	.+126    	; 0x295a <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    28dc:	6d 89       	ldd	r22, Y+21	; 0x15
    28de:	7e 89       	ldd	r23, Y+22	; 0x16
    28e0:	8f 89       	ldd	r24, Y+23	; 0x17
    28e2:	98 8d       	ldd	r25, Y+24	; 0x18
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	3f ef       	ldi	r19, 0xFF	; 255
    28e8:	4f e7       	ldi	r20, 0x7F	; 127
    28ea:	57 e4       	ldi	r21, 0x47	; 71
    28ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28f0:	18 16       	cp	r1, r24
    28f2:	4c f5       	brge	.+82     	; 0x2946 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f4:	69 8d       	ldd	r22, Y+25	; 0x19
    28f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	40 e2       	ldi	r20, 0x20	; 32
    2902:	51 e4       	ldi	r21, 0x41	; 65
    2904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	bc 01       	movw	r22, r24
    290e:	cd 01       	movw	r24, r26
    2910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	9c 8b       	std	Y+20, r25	; 0x14
    291a:	8b 8b       	std	Y+19, r24	; 0x13
    291c:	0f c0       	rjmp	.+30     	; 0x293c <LCD_displayCharacter+0x2b6>
    291e:	88 ec       	ldi	r24, 0xC8	; 200
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	9a 8b       	std	Y+18, r25	; 0x12
    2924:	89 8b       	std	Y+17, r24	; 0x11
    2926:	89 89       	ldd	r24, Y+17	; 0x11
    2928:	9a 89       	ldd	r25, Y+18	; 0x12
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	f1 f7       	brne	.-4      	; 0x292a <LCD_displayCharacter+0x2a4>
    292e:	9a 8b       	std	Y+18, r25	; 0x12
    2930:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2932:	8b 89       	ldd	r24, Y+19	; 0x13
    2934:	9c 89       	ldd	r25, Y+20	; 0x14
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	9c 8b       	std	Y+20, r25	; 0x14
    293a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293c:	8b 89       	ldd	r24, Y+19	; 0x13
    293e:	9c 89       	ldd	r25, Y+20	; 0x14
    2940:	00 97       	sbiw	r24, 0x00	; 0
    2942:	69 f7       	brne	.-38     	; 0x291e <LCD_displayCharacter+0x298>
    2944:	14 c0       	rjmp	.+40     	; 0x296e <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2946:	6d 89       	ldd	r22, Y+21	; 0x15
    2948:	7e 89       	ldd	r23, Y+22	; 0x16
    294a:	8f 89       	ldd	r24, Y+23	; 0x17
    294c:	98 8d       	ldd	r25, Y+24	; 0x18
    294e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	9c 8b       	std	Y+20, r25	; 0x14
    2958:	8b 8b       	std	Y+19, r24	; 0x13
    295a:	8b 89       	ldd	r24, Y+19	; 0x13
    295c:	9c 89       	ldd	r25, Y+20	; 0x14
    295e:	98 8b       	std	Y+16, r25	; 0x10
    2960:	8f 87       	std	Y+15, r24	; 0x0f
    2962:	8f 85       	ldd	r24, Y+15	; 0x0f
    2964:	98 89       	ldd	r25, Y+16	; 0x10
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	f1 f7       	brne	.-4      	; 0x2966 <LCD_displayCharacter+0x2e0>
    296a:	98 8b       	std	Y+16, r25	; 0x10
    296c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	66 e0       	ldi	r22, 0x06	; 6
    2972:	40 e0       	ldi	r20, 0x00	; 0
    2974:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <GPIO_writePin>
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	a0 e8       	ldi	r26, 0x80	; 128
    297e:	bf e3       	ldi	r27, 0x3F	; 63
    2980:	8b 87       	std	Y+11, r24	; 0x0b
    2982:	9c 87       	std	Y+12, r25	; 0x0c
    2984:	ad 87       	std	Y+13, r26	; 0x0d
    2986:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2988:	6b 85       	ldd	r22, Y+11	; 0x0b
    298a:	7c 85       	ldd	r23, Y+12	; 0x0c
    298c:	8d 85       	ldd	r24, Y+13	; 0x0d
    298e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	4a ef       	ldi	r20, 0xFA	; 250
    2996:	54 e4       	ldi	r21, 0x44	; 68
    2998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	8f 83       	std	Y+7, r24	; 0x07
    29a2:	98 87       	std	Y+8, r25	; 0x08
    29a4:	a9 87       	std	Y+9, r26	; 0x09
    29a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29a8:	6f 81       	ldd	r22, Y+7	; 0x07
    29aa:	78 85       	ldd	r23, Y+8	; 0x08
    29ac:	89 85       	ldd	r24, Y+9	; 0x09
    29ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e8       	ldi	r20, 0x80	; 128
    29b6:	5f e3       	ldi	r21, 0x3F	; 63
    29b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29bc:	88 23       	and	r24, r24
    29be:	2c f4       	brge	.+10     	; 0x29ca <LCD_displayCharacter+0x344>
		__ticks = 1;
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	9e 83       	std	Y+6, r25	; 0x06
    29c6:	8d 83       	std	Y+5, r24	; 0x05
    29c8:	3f c0       	rjmp	.+126    	; 0x2a48 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    29ca:	6f 81       	ldd	r22, Y+7	; 0x07
    29cc:	78 85       	ldd	r23, Y+8	; 0x08
    29ce:	89 85       	ldd	r24, Y+9	; 0x09
    29d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	3f ef       	ldi	r19, 0xFF	; 255
    29d6:	4f e7       	ldi	r20, 0x7F	; 127
    29d8:	57 e4       	ldi	r21, 0x47	; 71
    29da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29de:	18 16       	cp	r1, r24
    29e0:	4c f5       	brge	.+82     	; 0x2a34 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e2       	ldi	r20, 0x20	; 32
    29f0:	51 e4       	ldi	r21, 0x41	; 65
    29f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	bc 01       	movw	r22, r24
    29fc:	cd 01       	movw	r24, r26
    29fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	9e 83       	std	Y+6, r25	; 0x06
    2a08:	8d 83       	std	Y+5, r24	; 0x05
    2a0a:	0f c0       	rjmp	.+30     	; 0x2a2a <LCD_displayCharacter+0x3a4>
    2a0c:	88 ec       	ldi	r24, 0xC8	; 200
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	9c 83       	std	Y+4, r25	; 0x04
    2a12:	8b 83       	std	Y+3, r24	; 0x03
    2a14:	8b 81       	ldd	r24, Y+3	; 0x03
    2a16:	9c 81       	ldd	r25, Y+4	; 0x04
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	f1 f7       	brne	.-4      	; 0x2a18 <LCD_displayCharacter+0x392>
    2a1c:	9c 83       	std	Y+4, r25	; 0x04
    2a1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a20:	8d 81       	ldd	r24, Y+5	; 0x05
    2a22:	9e 81       	ldd	r25, Y+6	; 0x06
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	9e 83       	std	Y+6, r25	; 0x06
    2a28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2e:	00 97       	sbiw	r24, 0x00	; 0
    2a30:	69 f7       	brne	.-38     	; 0x2a0c <LCD_displayCharacter+0x386>
    2a32:	14 c0       	rjmp	.+40     	; 0x2a5c <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a34:	6f 81       	ldd	r22, Y+7	; 0x07
    2a36:	78 85       	ldd	r23, Y+8	; 0x08
    2a38:	89 85       	ldd	r24, Y+9	; 0x09
    2a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	9e 83       	std	Y+6, r25	; 0x06
    2a46:	8d 83       	std	Y+5, r24	; 0x05
    2a48:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4c:	9a 83       	std	Y+2, r25	; 0x02
    2a4e:	89 83       	std	Y+1, r24	; 0x01
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	9a 81       	ldd	r25, Y+2	; 0x02
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <LCD_displayCharacter+0x3ce>
    2a58:	9a 83       	std	Y+2, r25	; 0x02
    2a5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2a5c:	e9 96       	adiw	r28, 0x39	; 57
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	f8 94       	cli
    2a62:	de bf       	out	0x3e, r29	; 62
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	cd bf       	out	0x3d, r28	; 61
    2a68:	cf 91       	pop	r28
    2a6a:	df 91       	pop	r29
    2a6c:	08 95       	ret

00002a6e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2a6e:	df 93       	push	r29
    2a70:	cf 93       	push	r28
    2a72:	00 d0       	rcall	.+0      	; 0x2a74 <LCD_displayString+0x6>
    2a74:	0f 92       	push	r0
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
    2a7a:	9b 83       	std	Y+3, r25	; 0x03
    2a7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a7e:	19 82       	std	Y+1, r1	; 0x01
    2a80:	0e c0       	rjmp	.+28     	; 0x2a9e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	28 2f       	mov	r18, r24
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a8c:	fc 01       	movw	r30, r24
    2a8e:	e2 0f       	add	r30, r18
    2a90:	f3 1f       	adc	r31, r19
    2a92:	80 81       	ld	r24, Z
    2a94:	0e 94 43 13 	call	0x2686	; 0x2686 <LCD_displayCharacter>
		i++;
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	8f 5f       	subi	r24, 0xFF	; 255
    2a9c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	28 2f       	mov	r18, r24
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa6:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	e2 0f       	add	r30, r18
    2aac:	f3 1f       	adc	r31, r19
    2aae:	80 81       	ld	r24, Z
    2ab0:	88 23       	and	r24, r24
    2ab2:	39 f7       	brne	.-50     	; 0x2a82 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2ab4:	0f 90       	pop	r0
    2ab6:	0f 90       	pop	r0
    2ab8:	0f 90       	pop	r0
    2aba:	cf 91       	pop	r28
    2abc:	df 91       	pop	r29
    2abe:	08 95       	ret

00002ac0 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2ac0:	df 93       	push	r29
    2ac2:	cf 93       	push	r28
    2ac4:	00 d0       	rcall	.+0      	; 0x2ac6 <LCD_moveCursor+0x6>
    2ac6:	00 d0       	rcall	.+0      	; 0x2ac8 <LCD_moveCursor+0x8>
    2ac8:	0f 92       	push	r0
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
    2ace:	8a 83       	std	Y+2, r24	; 0x02
    2ad0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad4:	28 2f       	mov	r18, r24
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	3d 83       	std	Y+5, r19	; 0x05
    2ada:	2c 83       	std	Y+4, r18	; 0x04
    2adc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ade:	9d 81       	ldd	r25, Y+5	; 0x05
    2ae0:	81 30       	cpi	r24, 0x01	; 1
    2ae2:	91 05       	cpc	r25, r1
    2ae4:	c1 f0       	breq	.+48     	; 0x2b16 <LCD_moveCursor+0x56>
    2ae6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ae8:	3d 81       	ldd	r19, Y+5	; 0x05
    2aea:	22 30       	cpi	r18, 0x02	; 2
    2aec:	31 05       	cpc	r19, r1
    2aee:	2c f4       	brge	.+10     	; 0x2afa <LCD_moveCursor+0x3a>
    2af0:	8c 81       	ldd	r24, Y+4	; 0x04
    2af2:	9d 81       	ldd	r25, Y+5	; 0x05
    2af4:	00 97       	sbiw	r24, 0x00	; 0
    2af6:	61 f0       	breq	.+24     	; 0x2b10 <LCD_moveCursor+0x50>
    2af8:	19 c0       	rjmp	.+50     	; 0x2b2c <LCD_moveCursor+0x6c>
    2afa:	2c 81       	ldd	r18, Y+4	; 0x04
    2afc:	3d 81       	ldd	r19, Y+5	; 0x05
    2afe:	22 30       	cpi	r18, 0x02	; 2
    2b00:	31 05       	cpc	r19, r1
    2b02:	69 f0       	breq	.+26     	; 0x2b1e <LCD_moveCursor+0x5e>
    2b04:	8c 81       	ldd	r24, Y+4	; 0x04
    2b06:	9d 81       	ldd	r25, Y+5	; 0x05
    2b08:	83 30       	cpi	r24, 0x03	; 3
    2b0a:	91 05       	cpc	r25, r1
    2b0c:	61 f0       	breq	.+24     	; 0x2b26 <LCD_moveCursor+0x66>
    2b0e:	0e c0       	rjmp	.+28     	; 0x2b2c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2b10:	8b 81       	ldd	r24, Y+3	; 0x03
    2b12:	89 83       	std	Y+1, r24	; 0x01
    2b14:	0b c0       	rjmp	.+22     	; 0x2b2c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2b16:	8b 81       	ldd	r24, Y+3	; 0x03
    2b18:	80 5c       	subi	r24, 0xC0	; 192
    2b1a:	89 83       	std	Y+1, r24	; 0x01
    2b1c:	07 c0       	rjmp	.+14     	; 0x2b2c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b20:	80 5f       	subi	r24, 0xF0	; 240
    2b22:	89 83       	std	Y+1, r24	; 0x01
    2b24:	03 c0       	rjmp	.+6      	; 0x2b2c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	80 5b       	subi	r24, 0xB0	; 176
    2b2a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
    2b2e:	80 68       	ori	r24, 0x80	; 128
    2b30:	0e 94 4f 11 	call	0x229e	; 0x229e <LCD_sendCommand>
}
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	0f 90       	pop	r0
    2b3c:	0f 90       	pop	r0
    2b3e:	cf 91       	pop	r28
    2b40:	df 91       	pop	r29
    2b42:	08 95       	ret

00002b44 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2b44:	df 93       	push	r29
    2b46:	cf 93       	push	r28
    2b48:	00 d0       	rcall	.+0      	; 0x2b4a <LCD_displayStringRowColumn+0x6>
    2b4a:	00 d0       	rcall	.+0      	; 0x2b4c <LCD_displayStringRowColumn+0x8>
    2b4c:	cd b7       	in	r28, 0x3d	; 61
    2b4e:	de b7       	in	r29, 0x3e	; 62
    2b50:	89 83       	std	Y+1, r24	; 0x01
    2b52:	6a 83       	std	Y+2, r22	; 0x02
    2b54:	5c 83       	std	Y+4, r21	; 0x04
    2b56:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2b58:	89 81       	ldd	r24, Y+1	; 0x01
    2b5a:	6a 81       	ldd	r22, Y+2	; 0x02
    2b5c:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2b60:	8b 81       	ldd	r24, Y+3	; 0x03
    2b62:	9c 81       	ldd	r25, Y+4	; 0x04
    2b64:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <LCD_displayString>
}
    2b68:	0f 90       	pop	r0
    2b6a:	0f 90       	pop	r0
    2b6c:	0f 90       	pop	r0
    2b6e:	0f 90       	pop	r0
    2b70:	cf 91       	pop	r28
    2b72:	df 91       	pop	r29
    2b74:	08 95       	ret

00002b76 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2b76:	df 93       	push	r29
    2b78:	cf 93       	push	r28
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62
    2b7e:	62 97       	sbiw	r28, 0x12	; 18
    2b80:	0f b6       	in	r0, 0x3f	; 63
    2b82:	f8 94       	cli
    2b84:	de bf       	out	0x3e, r29	; 62
    2b86:	0f be       	out	0x3f, r0	; 63
    2b88:	cd bf       	out	0x3d, r28	; 61
    2b8a:	9a 8b       	std	Y+18, r25	; 0x12
    2b8c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2b8e:	89 89       	ldd	r24, Y+17	; 0x11
    2b90:	9a 89       	ldd	r25, Y+18	; 0x12
    2b92:	9e 01       	movw	r18, r28
    2b94:	2f 5f       	subi	r18, 0xFF	; 255
    2b96:	3f 4f       	sbci	r19, 0xFF	; 255
    2b98:	b9 01       	movw	r22, r18
    2b9a:	4a e0       	ldi	r20, 0x0A	; 10
    2b9c:	50 e0       	ldi	r21, 0x00	; 0
    2b9e:	0e 94 65 17 	call	0x2eca	; 0x2eca <itoa>
   LCD_displayString(buff); /* Display the string */
    2ba2:	ce 01       	movw	r24, r28
    2ba4:	01 96       	adiw	r24, 0x01	; 1
    2ba6:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <LCD_displayString>
}
    2baa:	62 96       	adiw	r28, 0x12	; 18
    2bac:	0f b6       	in	r0, 0x3f	; 63
    2bae:	f8 94       	cli
    2bb0:	de bf       	out	0x3e, r29	; 62
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	cd bf       	out	0x3d, r28	; 61
    2bb6:	cf 91       	pop	r28
    2bb8:	df 91       	pop	r29
    2bba:	08 95       	ret

00002bbc <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2bbc:	df 93       	push	r29
    2bbe:	cf 93       	push	r28
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	0e 94 4f 11 	call	0x229e	; 0x229e <LCD_sendCommand>
}
    2bca:	cf 91       	pop	r28
    2bcc:	df 91       	pop	r29
    2bce:	08 95       	ret

00002bd0 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const Uart_ConfigType * Config_Ptr)
{
    2bd0:	df 93       	push	r29
    2bd2:	cf 93       	push	r28
    2bd4:	00 d0       	rcall	.+0      	; 0x2bd6 <UART_init+0x6>
    2bd6:	00 d0       	rcall	.+0      	; 0x2bd8 <UART_init+0x8>
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	9c 83       	std	Y+4, r25	; 0x04
    2bde:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2be0:	1a 82       	std	Y+2, r1	; 0x02
    2be2:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2be4:	eb e2       	ldi	r30, 0x2B	; 43
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	82 e0       	ldi	r24, 0x02	; 2
    2bea:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	if((Config_Ptr->bits)>Eight){
    2bec:	eb 81       	ldd	r30, Y+3	; 0x03
    2bee:	fc 81       	ldd	r31, Y+4	; 0x04
    2bf0:	82 81       	ldd	r24, Z+2	; 0x02
    2bf2:	84 30       	cpi	r24, 0x04	; 4
    2bf4:	28 f0       	brcs	.+10     	; 0x2c00 <UART_init+0x30>
		UCSRB=(1<<RXEN) | (1<<TXEN) | (1<<UCSZ2);
    2bf6:	ea e2       	ldi	r30, 0x2A	; 42
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	8c e1       	ldi	r24, 0x1C	; 28
    2bfc:	80 83       	st	Z, r24
    2bfe:	04 c0       	rjmp	.+8      	; 0x2c08 <UART_init+0x38>
	}
	else{
		UCSRB = (1<<RXEN) | (1<<TXEN);
    2c00:	ea e2       	ldi	r30, 0x2A	; 42
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	88 e1       	ldi	r24, 0x18	; 24
    2c06:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC=0;
    2c08:	e0 e4       	ldi	r30, 0x40	; 64
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	10 82       	st	Z, r1
	UCSRC=(UCSRC&0xf9) | (Config_Ptr->bits<<1);
    2c0e:	a0 e4       	ldi	r26, 0x40	; 64
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	e0 e4       	ldi	r30, 0x40	; 64
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	28 2f       	mov	r18, r24
    2c1a:	29 7f       	andi	r18, 0xF9	; 249
    2c1c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c1e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c20:	82 81       	ldd	r24, Z+2	; 0x02
    2c22:	88 2f       	mov	r24, r24
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	88 0f       	add	r24, r24
    2c28:	99 1f       	adc	r25, r25
    2c2a:	82 2b       	or	r24, r18
    2c2c:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xf7)|((Config_Ptr->number)<<3);
    2c2e:	a0 e4       	ldi	r26, 0x40	; 64
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	e0 e4       	ldi	r30, 0x40	; 64
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 81       	ld	r24, Z
    2c38:	28 2f       	mov	r18, r24
    2c3a:	27 7f       	andi	r18, 0xF7	; 247
    2c3c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c3e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c40:	81 81       	ldd	r24, Z+1	; 0x01
    2c42:	88 2f       	mov	r24, r24
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	88 0f       	add	r24, r24
    2c48:	99 1f       	adc	r25, r25
    2c4a:	88 0f       	add	r24, r24
    2c4c:	99 1f       	adc	r25, r25
    2c4e:	88 0f       	add	r24, r24
    2c50:	99 1f       	adc	r25, r25
    2c52:	82 2b       	or	r24, r18
    2c54:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xcf)|((Config_Ptr->type)<<4);
    2c56:	a0 e4       	ldi	r26, 0x40	; 64
    2c58:	b0 e0       	ldi	r27, 0x00	; 0
    2c5a:	e0 e4       	ldi	r30, 0x40	; 64
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	80 81       	ld	r24, Z
    2c60:	28 2f       	mov	r18, r24
    2c62:	2f 7c       	andi	r18, 0xCF	; 207
    2c64:	eb 81       	ldd	r30, Y+3	; 0x03
    2c66:	fc 81       	ldd	r31, Y+4	; 0x04
    2c68:	80 81       	ld	r24, Z
    2c6a:	88 2f       	mov	r24, r24
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	82 95       	swap	r24
    2c70:	92 95       	swap	r25
    2c72:	90 7f       	andi	r25, 0xF0	; 240
    2c74:	98 27       	eor	r25, r24
    2c76:	80 7f       	andi	r24, 0xF0	; 240
    2c78:	98 27       	eor	r25, r24
    2c7a:	82 2b       	or	r24, r18
    2c7c:	8c 93       	st	X, r24
	UCSRC = UCSRC|(1<<URSEL);
    2c7e:	a0 e4       	ldi	r26, 0x40	; 64
    2c80:	b0 e0       	ldi	r27, 0x00	; 0
    2c82:	e0 e4       	ldi	r30, 0x40	; 64
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	80 68       	ori	r24, 0x80	; 128
    2c8a:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) *8UL))) - 1);
    2c8c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c8e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c90:	83 81       	ldd	r24, Z+3	; 0x03
    2c92:	94 81       	ldd	r25, Z+4	; 0x04
    2c94:	cc 01       	movw	r24, r24
    2c96:	a0 e0       	ldi	r26, 0x00	; 0
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	88 0f       	add	r24, r24
    2c9c:	99 1f       	adc	r25, r25
    2c9e:	aa 1f       	adc	r26, r26
    2ca0:	bb 1f       	adc	r27, r27
    2ca2:	88 0f       	add	r24, r24
    2ca4:	99 1f       	adc	r25, r25
    2ca6:	aa 1f       	adc	r26, r26
    2ca8:	bb 1f       	adc	r27, r27
    2caa:	88 0f       	add	r24, r24
    2cac:	99 1f       	adc	r25, r25
    2cae:	aa 1f       	adc	r26, r26
    2cb0:	bb 1f       	adc	r27, r27
    2cb2:	9c 01       	movw	r18, r24
    2cb4:	ad 01       	movw	r20, r26
    2cb6:	80 e4       	ldi	r24, 0x40	; 64
    2cb8:	92 e4       	ldi	r25, 0x42	; 66
    2cba:	af e0       	ldi	r26, 0x0F	; 15
    2cbc:	b0 e0       	ldi	r27, 0x00	; 0
    2cbe:	bc 01       	movw	r22, r24
    2cc0:	cd 01       	movw	r24, r26
    2cc2:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__udivmodsi4>
    2cc6:	da 01       	movw	r26, r20
    2cc8:	c9 01       	movw	r24, r18
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	9a 83       	std	Y+2, r25	; 0x02
    2cce:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2cd0:	e0 e4       	ldi	r30, 0x40	; 64
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	89 81       	ldd	r24, Y+1	; 0x01
    2cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd8:	89 2f       	mov	r24, r25
    2cda:	99 27       	eor	r25, r25
    2cdc:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2cde:	e9 e2       	ldi	r30, 0x29	; 41
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
    2ce4:	80 83       	st	Z, r24
}
    2ce6:	0f 90       	pop	r0
    2ce8:	0f 90       	pop	r0
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	cf 91       	pop	r28
    2cf0:	df 91       	pop	r29
    2cf2:	08 95       	ret

00002cf4 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2cf4:	df 93       	push	r29
    2cf6:	cf 93       	push	r28
    2cf8:	0f 92       	push	r0
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
    2cfe:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2d00:	eb e2       	ldi	r30, 0x2B	; 43
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	88 2f       	mov	r24, r24
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	80 72       	andi	r24, 0x20	; 32
    2d0c:	90 70       	andi	r25, 0x00	; 0
    2d0e:	00 97       	sbiw	r24, 0x00	; 0
    2d10:	b9 f3       	breq	.-18     	; 0x2d00 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2d12:	ec e2       	ldi	r30, 0x2C	; 44
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2d1a:	0f 90       	pop	r0
    2d1c:	cf 91       	pop	r28
    2d1e:	df 91       	pop	r29
    2d20:	08 95       	ret

00002d22 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2d22:	df 93       	push	r29
    2d24:	cf 93       	push	r28
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2d2a:	eb e2       	ldi	r30, 0x2B	; 43
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	88 23       	and	r24, r24
    2d32:	dc f7       	brge	.-10     	; 0x2d2a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2d34:	ec e2       	ldi	r30, 0x2C	; 44
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	80 81       	ld	r24, Z
}
    2d3a:	cf 91       	pop	r28
    2d3c:	df 91       	pop	r29
    2d3e:	08 95       	ret

00002d40 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2d40:	df 93       	push	r29
    2d42:	cf 93       	push	r28
    2d44:	00 d0       	rcall	.+0      	; 0x2d46 <UART_sendString+0x6>
    2d46:	0f 92       	push	r0
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62
    2d4c:	9b 83       	std	Y+3, r25	; 0x03
    2d4e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d50:	19 82       	std	Y+1, r1	; 0x01
    2d52:	0e c0       	rjmp	.+28     	; 0x2d70 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2d54:	89 81       	ldd	r24, Y+1	; 0x01
    2d56:	28 2f       	mov	r18, r24
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d5e:	fc 01       	movw	r30, r24
    2d60:	e2 0f       	add	r30, r18
    2d62:	f3 1f       	adc	r31, r19
    2d64:	80 81       	ld	r24, Z
    2d66:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <UART_sendByte>
		i++;
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	8f 5f       	subi	r24, 0xFF	; 255
    2d6e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	28 2f       	mov	r18, r24
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	8a 81       	ldd	r24, Y+2	; 0x02
    2d78:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	e2 0f       	add	r30, r18
    2d7e:	f3 1f       	adc	r31, r19
    2d80:	80 81       	ld	r24, Z
    2d82:	88 23       	and	r24, r24
    2d84:	39 f7       	brne	.-50     	; 0x2d54 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2d86:	0f 90       	pop	r0
    2d88:	0f 90       	pop	r0
    2d8a:	0f 90       	pop	r0
    2d8c:	cf 91       	pop	r28
    2d8e:	df 91       	pop	r29
    2d90:	08 95       	ret

00002d92 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2d92:	0f 93       	push	r16
    2d94:	1f 93       	push	r17
    2d96:	df 93       	push	r29
    2d98:	cf 93       	push	r28
    2d9a:	00 d0       	rcall	.+0      	; 0x2d9c <UART_receiveString+0xa>
    2d9c:	0f 92       	push	r0
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62
    2da2:	9b 83       	std	Y+3, r25	; 0x03
    2da4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2da6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2da8:	89 81       	ldd	r24, Y+1	; 0x01
    2daa:	28 2f       	mov	r18, r24
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	8a 81       	ldd	r24, Y+2	; 0x02
    2db0:	9b 81       	ldd	r25, Y+3	; 0x03
    2db2:	8c 01       	movw	r16, r24
    2db4:	02 0f       	add	r16, r18
    2db6:	13 1f       	adc	r17, r19
    2db8:	0e 94 91 16 	call	0x2d22	; 0x2d22 <UART_recieveByte>
    2dbc:	f8 01       	movw	r30, r16
    2dbe:	80 83       	st	Z, r24
    2dc0:	0f c0       	rjmp	.+30     	; 0x2de0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	8f 5f       	subi	r24, 0xFF	; 255
    2dc6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd2:	8c 01       	movw	r16, r24
    2dd4:	02 0f       	add	r16, r18
    2dd6:	13 1f       	adc	r17, r19
    2dd8:	0e 94 91 16 	call	0x2d22	; 0x2d22 <UART_recieveByte>
    2ddc:	f8 01       	movw	r30, r16
    2dde:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	28 2f       	mov	r18, r24
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	8a 81       	ldd	r24, Y+2	; 0x02
    2de8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dea:	fc 01       	movw	r30, r24
    2dec:	e2 0f       	add	r30, r18
    2dee:	f3 1f       	adc	r31, r19
    2df0:	80 81       	ld	r24, Z
    2df2:	83 32       	cpi	r24, 0x23	; 35
    2df4:	31 f7       	brne	.-52     	; 0x2dc2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2df6:	89 81       	ldd	r24, Y+1	; 0x01
    2df8:	28 2f       	mov	r18, r24
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    2e00:	fc 01       	movw	r30, r24
    2e02:	e2 0f       	add	r30, r18
    2e04:	f3 1f       	adc	r31, r19
    2e06:	10 82       	st	Z, r1
}
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	1f 91       	pop	r17
    2e14:	0f 91       	pop	r16
    2e16:	08 95       	ret

00002e18 <__udivmodsi4>:
    2e18:	a1 e2       	ldi	r26, 0x21	; 33
    2e1a:	1a 2e       	mov	r1, r26
    2e1c:	aa 1b       	sub	r26, r26
    2e1e:	bb 1b       	sub	r27, r27
    2e20:	fd 01       	movw	r30, r26
    2e22:	0d c0       	rjmp	.+26     	; 0x2e3e <__udivmodsi4_ep>

00002e24 <__udivmodsi4_loop>:
    2e24:	aa 1f       	adc	r26, r26
    2e26:	bb 1f       	adc	r27, r27
    2e28:	ee 1f       	adc	r30, r30
    2e2a:	ff 1f       	adc	r31, r31
    2e2c:	a2 17       	cp	r26, r18
    2e2e:	b3 07       	cpc	r27, r19
    2e30:	e4 07       	cpc	r30, r20
    2e32:	f5 07       	cpc	r31, r21
    2e34:	20 f0       	brcs	.+8      	; 0x2e3e <__udivmodsi4_ep>
    2e36:	a2 1b       	sub	r26, r18
    2e38:	b3 0b       	sbc	r27, r19
    2e3a:	e4 0b       	sbc	r30, r20
    2e3c:	f5 0b       	sbc	r31, r21

00002e3e <__udivmodsi4_ep>:
    2e3e:	66 1f       	adc	r22, r22
    2e40:	77 1f       	adc	r23, r23
    2e42:	88 1f       	adc	r24, r24
    2e44:	99 1f       	adc	r25, r25
    2e46:	1a 94       	dec	r1
    2e48:	69 f7       	brne	.-38     	; 0x2e24 <__udivmodsi4_loop>
    2e4a:	60 95       	com	r22
    2e4c:	70 95       	com	r23
    2e4e:	80 95       	com	r24
    2e50:	90 95       	com	r25
    2e52:	9b 01       	movw	r18, r22
    2e54:	ac 01       	movw	r20, r24
    2e56:	bd 01       	movw	r22, r26
    2e58:	cf 01       	movw	r24, r30
    2e5a:	08 95       	ret

00002e5c <__prologue_saves__>:
    2e5c:	2f 92       	push	r2
    2e5e:	3f 92       	push	r3
    2e60:	4f 92       	push	r4
    2e62:	5f 92       	push	r5
    2e64:	6f 92       	push	r6
    2e66:	7f 92       	push	r7
    2e68:	8f 92       	push	r8
    2e6a:	9f 92       	push	r9
    2e6c:	af 92       	push	r10
    2e6e:	bf 92       	push	r11
    2e70:	cf 92       	push	r12
    2e72:	df 92       	push	r13
    2e74:	ef 92       	push	r14
    2e76:	ff 92       	push	r15
    2e78:	0f 93       	push	r16
    2e7a:	1f 93       	push	r17
    2e7c:	cf 93       	push	r28
    2e7e:	df 93       	push	r29
    2e80:	cd b7       	in	r28, 0x3d	; 61
    2e82:	de b7       	in	r29, 0x3e	; 62
    2e84:	ca 1b       	sub	r28, r26
    2e86:	db 0b       	sbc	r29, r27
    2e88:	0f b6       	in	r0, 0x3f	; 63
    2e8a:	f8 94       	cli
    2e8c:	de bf       	out	0x3e, r29	; 62
    2e8e:	0f be       	out	0x3f, r0	; 63
    2e90:	cd bf       	out	0x3d, r28	; 61
    2e92:	09 94       	ijmp

00002e94 <__epilogue_restores__>:
    2e94:	2a 88       	ldd	r2, Y+18	; 0x12
    2e96:	39 88       	ldd	r3, Y+17	; 0x11
    2e98:	48 88       	ldd	r4, Y+16	; 0x10
    2e9a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e9c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e9e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ea0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ea2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ea4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ea6:	b9 84       	ldd	r11, Y+9	; 0x09
    2ea8:	c8 84       	ldd	r12, Y+8	; 0x08
    2eaa:	df 80       	ldd	r13, Y+7	; 0x07
    2eac:	ee 80       	ldd	r14, Y+6	; 0x06
    2eae:	fd 80       	ldd	r15, Y+5	; 0x05
    2eb0:	0c 81       	ldd	r16, Y+4	; 0x04
    2eb2:	1b 81       	ldd	r17, Y+3	; 0x03
    2eb4:	aa 81       	ldd	r26, Y+2	; 0x02
    2eb6:	b9 81       	ldd	r27, Y+1	; 0x01
    2eb8:	ce 0f       	add	r28, r30
    2eba:	d1 1d       	adc	r29, r1
    2ebc:	0f b6       	in	r0, 0x3f	; 63
    2ebe:	f8 94       	cli
    2ec0:	de bf       	out	0x3e, r29	; 62
    2ec2:	0f be       	out	0x3f, r0	; 63
    2ec4:	cd bf       	out	0x3d, r28	; 61
    2ec6:	ed 01       	movw	r28, r26
    2ec8:	08 95       	ret

00002eca <itoa>:
    2eca:	fb 01       	movw	r30, r22
    2ecc:	9f 01       	movw	r18, r30
    2ece:	e8 94       	clt
    2ed0:	42 30       	cpi	r20, 0x02	; 2
    2ed2:	c4 f0       	brlt	.+48     	; 0x2f04 <itoa+0x3a>
    2ed4:	45 32       	cpi	r20, 0x25	; 37
    2ed6:	b4 f4       	brge	.+44     	; 0x2f04 <itoa+0x3a>
    2ed8:	4a 30       	cpi	r20, 0x0A	; 10
    2eda:	29 f4       	brne	.+10     	; 0x2ee6 <itoa+0x1c>
    2edc:	97 fb       	bst	r25, 7
    2ede:	1e f4       	brtc	.+6      	; 0x2ee6 <itoa+0x1c>
    2ee0:	90 95       	com	r25
    2ee2:	81 95       	neg	r24
    2ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ee6:	64 2f       	mov	r22, r20
    2ee8:	77 27       	eor	r23, r23
    2eea:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <__udivmodhi4>
    2eee:	80 5d       	subi	r24, 0xD0	; 208
    2ef0:	8a 33       	cpi	r24, 0x3A	; 58
    2ef2:	0c f0       	brlt	.+2      	; 0x2ef6 <itoa+0x2c>
    2ef4:	89 5d       	subi	r24, 0xD9	; 217
    2ef6:	81 93       	st	Z+, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	00 97       	sbiw	r24, 0x00	; 0
    2efc:	a1 f7       	brne	.-24     	; 0x2ee6 <itoa+0x1c>
    2efe:	16 f4       	brtc	.+4      	; 0x2f04 <itoa+0x3a>
    2f00:	5d e2       	ldi	r21, 0x2D	; 45
    2f02:	51 93       	st	Z+, r21
    2f04:	10 82       	st	Z, r1
    2f06:	c9 01       	movw	r24, r18
    2f08:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <strrev>

00002f0c <strrev>:
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	fc 01       	movw	r30, r24
    2f10:	67 2f       	mov	r22, r23
    2f12:	71 91       	ld	r23, Z+
    2f14:	77 23       	and	r23, r23
    2f16:	e1 f7       	brne	.-8      	; 0x2f10 <strrev+0x4>
    2f18:	32 97       	sbiw	r30, 0x02	; 2
    2f1a:	04 c0       	rjmp	.+8      	; 0x2f24 <strrev+0x18>
    2f1c:	7c 91       	ld	r23, X
    2f1e:	6d 93       	st	X+, r22
    2f20:	70 83       	st	Z, r23
    2f22:	62 91       	ld	r22, -Z
    2f24:	ae 17       	cp	r26, r30
    2f26:	bf 07       	cpc	r27, r31
    2f28:	c8 f3       	brcs	.-14     	; 0x2f1c <strrev+0x10>
    2f2a:	08 95       	ret

00002f2c <__udivmodhi4>:
    2f2c:	aa 1b       	sub	r26, r26
    2f2e:	bb 1b       	sub	r27, r27
    2f30:	51 e1       	ldi	r21, 0x11	; 17
    2f32:	07 c0       	rjmp	.+14     	; 0x2f42 <__udivmodhi4_ep>

00002f34 <__udivmodhi4_loop>:
    2f34:	aa 1f       	adc	r26, r26
    2f36:	bb 1f       	adc	r27, r27
    2f38:	a6 17       	cp	r26, r22
    2f3a:	b7 07       	cpc	r27, r23
    2f3c:	10 f0       	brcs	.+4      	; 0x2f42 <__udivmodhi4_ep>
    2f3e:	a6 1b       	sub	r26, r22
    2f40:	b7 0b       	sbc	r27, r23

00002f42 <__udivmodhi4_ep>:
    2f42:	88 1f       	adc	r24, r24
    2f44:	99 1f       	adc	r25, r25
    2f46:	5a 95       	dec	r21
    2f48:	a9 f7       	brne	.-22     	; 0x2f34 <__udivmodhi4_loop>
    2f4a:	80 95       	com	r24
    2f4c:	90 95       	com	r25
    2f4e:	bc 01       	movw	r22, r24
    2f50:	cd 01       	movw	r24, r26
    2f52:	08 95       	ret

00002f54 <_exit>:
    2f54:	f8 94       	cli

00002f56 <__stop_program>:
    2f56:	ff cf       	rjmp	.-2      	; 0x2f56 <__stop_program>
